import{d as c,g as h,m as d,n as m,S as l}from"./index-BwIP81FD.js";import{G as f}from"./lil-gui.esm-D2cLj-mk.js";import{Y as u}from"./index-DFKcNkqO.js";import{c as b}from"./index-CFPivVNZ.js";import{u as k,H as y}from"./HTTPFileSystem-DVIUrFO_.js";import{C}from"./CollapsiblePanel-DR8lkDrz.js";import{D as v}from"./DrawingTool-ClGBsDBZ.js";import{L as S}from"./LegendBox-YMonQJ1J.js";import{L as D}from"./LegendStore-CGgeb9zL.js";import{T as z}from"./TimeSlider-Bq-ahgjU.js";import{S as A}from"./geojson-layer-DohWtVq3.js";import{t as M}from"./index-DysAwKxe.js";import{M as T}from"./mapbox-overlay-HS93bZkL.js";import{D as w}from"./data-filter-extension-BJBYmUft.js";import{Z as L}from"./ZoomButtons-D_WYIzIx.js";import{B as P}from"./BackgroundLayers-DU3ROBLH.js";import"./fxp-DjoqftHf.js";import"./layer-T9N9JmIf.js";import"./layer-extension-LbH36Bf-.js";import"./Coords-C-Mhj230.js";import"./turf.es-BzqbG201.js";import"./ColorsAndWidths-CPY1BpxV.js";import"./cubehelix-BzW-tINw.js";import"./threshold-CrWFx_nu.js";import"./index-_doEQLKC.js";import"./rainbow-DNS2KC2A.js";import"./geo-utils-B2AlDn9k.js";import"./sequential-pySAYR1V.js";import"./pow-RbZoge3Z.js";import"./precisionRound-CRsIqO1V.js";const R=`uniform highlightUniforms {
  uniform vec4 numBreakpoints;
  uniform vec4 colors[21];
} highlight;
`,$={name:"highlight",vs:R,uniformTypes:{numBreakpoints:"vec4<f32>",colors:"vec4<f32>"}};class p extends A{MAX_COLORS=21;uniformColors=new Float32Array(this.MAX_COLORS*4);initializeState(t){super.initializeState(t),this.getAttributeManager().addInstanced({instanceValue:{accessor:"getValue",size:1,defaultValue:0,transition:!0}})}getShaders(){const t=super.getShaders();return t.inject={"vs:#decl":`
            #define MAX_COLORS 21
            #define MAX_BREAKPOINTS 20
            in float instanceValue;
            float breakpoints[MAX_BREAKPOINTS];
            `,"vs:DECKGL_FILTER_COLOR":`
            picking_setPickingColor(geometry.pickingColor);

            for(int i=0; i < MAX_BREAKPOINTS; ++i) {
              breakpoints[i] = highlight.colors[i].w;
            }

            int numBreakpoints = int(highlight.numBreakpoints.x);

            for(int i=0; i < MAX_BREAKPOINTS; ++i) {
              if (instanceValue < breakpoints[i]) {
                color = vec4(highlight.colors[i].x, highlight.colors[i].y, highlight.colors[i].z, 1.0);
                return;
              }
              if (i == numBreakpoints) {
                color = vec4(highlight.colors[i].x, highlight.colors[i].y, highlight.colors[i].z, 1.0);
                return;
              }
            }
            color = vec4(1.0, 0.0, 0.0, 1.0);
            return;
          `},t.modules=[...t.modules,$],t}updateState(t){const{props:e,oldProps:s,changeFlags:o}=t;super.updateState({props:e,oldProps:s,changeFlags:o}),e.colors.forEach((r,n)=>{this.uniformColors[n*4]=r[0]/255,this.uniformColors[n*4+1]=r[1]/255,this.uniformColors[n*4+2]=r[2]/255,n<e.breakpoints.length&&(this.uniformColors[n*4+3]=e.breakpoints[n])});const a={numBreakpoints:new Float32Array(4).fill(e.breakpoints.length),colors:this.uniformColors};for(const r of this.getModels())r.shaderInputs.setProps({highlight:a})}}p.layerName="ScatterplotColorBinsLayer";p.defaultProps={colors:[[128,128,128],[128,128,128]],breakpoints:[0]};const g="/",_=new w({filterSize:1}),B=c({name:"MyDeckComponent",props:{viewId:{type:String,required:!0},dark:{type:Boolean,required:!0},mapIsIndependent:{type:Boolean,required:!0},onClick:{type:Function,required:!1},timeFilter:{type:Array,required:!0},colors:{type:Array,required:!0},breakpoints:{type:Array,required:!0},radius:{type:Number,required:!0},bgLayers:{type:Object},pointLayers:{type:Array,required:!0}},data(){return{mymap:null,deckOverlay:null,globalState:h.state,tooltipHTML:"",tooltipStyle:{position:"absolute",padding:"4px 8px",display:"block",top:0,left:0,color:this.dark?"#ccc":"#223",backgroundColor:this.dark?"#2a3c4f":"white",zIndex:2e4}}},watch:{layers(){this.deckOverlay?.setProps({layers:this.layers})},dark(){const i=`${g}map-styles/${this.dark?"dark":"positron"}.json`;this.mymap?.setStyle(i)}},computed:{layers(){const i=[],t=this.bgLayers?.layers();t&&i.push(...t.layersBelow);const e=this.pointLayers.map((s,o)=>{const a=s.timeRange[0]>this.timeFilter[1]||s.timeRange[1]<this.timeFilter[0];return new p({data:{length:s.time.length,attributes:{getPosition:{value:s.coordinates,size:2},getFilterValue:{value:s.time,size:1},getValue:{value:s.value,size:1}}},autoHighlight:!0,breakpoints:this.breakpoints,colors:this.colors,extensions:[_],id:`scatterplot-${o}`,filled:!0,filterRange:this.timeFilter.length?this.timeFilter:null,getRadius:this.radius,highlightColor:[255,255,255,192],opacity:1,parameters:{depthTest:!1},pickable:!0,radiusScale:1,stroked:!1,updateTriggers:{getPosition:this.pointLayers,getFillColor:this.pointLayers,getFilterValue:this.timeFilter,getValue:[this.colors]},visible:!a})});return i.push(...e),t&&i.push(...t.layersOnTop),i},"globalState.viewState"(){if(this.mapIsIndependent)return;const i=this.globalState.viewState,t=this.mymap?.getCenter();(i.longitude!==t.lng||i.latitude!==t.lat||i.zoom!==this.mymap?.getZoom()||i.pitch!==this.mymap?.getPitch()||i.bearing!==this.mymap?.getBearing())&&this.mymap?.jumpTo(Object.assign({center:{lng:i.longitude,lat:i.latitude}},i))}},async mounted(){const i=`${g}map-styles/${this.dark?"dark":"positron"}.json`,t=this.viewId,e=this.globalState.viewState.center;this.mymap=new d.Map({center:e,zoom:7,container:t,style:i}),this.mymap.on("move",this.handleMove),this.mymap.on("style.load",()=>{this.deckOverlay=new T({interleaved:!0,layers:this.layers,onClick:this.handleClick}),this.mymap?.addControl(this.deckOverlay)})},beforeDestroy(){this.deckOverlay&&this.mymap?.removeControl(this.deckOverlay),this.mymap?.remove()},methods:{convertSecondsToClockTimeMinutes(i){const t=i;try{const e=M(t),s=("00"+e.minutes).slice(-2);return`${e.hours}:${s}`}catch{return"00:00"}},handleMove(){if(this.mapIsIndependent)return;const i=this.mymap?.getCenter(),t={latitude:i.lat,longitude:i.lng,zoom:this.mymap?.getZoom(),bearing:this.mymap?.getBearing(),pitch:this.mymap?.getPitch(),jump:!0};h.commit("setMapCamera",t)},getTooltip(i,t){if(i.index<0)return null;const e=i?.layer?.id;if(e===void 0)return null;const s=this.pointLayers[e].time[i.index],o=this.convertSecondsToClockTimeMinutes(s),a=this.pointLayers[e].value[i.index];return{html:`        <table style="font-size: 0.9rem">
        <tr>
          <td>Value</td>
          <td style="padding-left: 0.5rem;"><b>${Math.round(1e6*a)/1e6}</b></td>
        </tr><tr>
          <td style="text-align: right;">Time</td>
          <td style="padding-left: 0.5rem;"><b>${o}</b></td>
        </tr>
        </table>
      `,style:this.dark?{color:"#ccc",backgroundColor:"#2a3c4f"}:{color:"#223",backgroundColor:"white"}}},handleClick(i,t){this.tooltipStyle.display="none",this.onClick&&this.onClick(i,t)}}});var E=function(){var t=this,e=t._self._c;return t._self._setupProxy,e("div",{staticClass:"deck-map flex-col"},[e("div",{staticClass:"map-container",attrs:{id:t.viewId}}),e("div",{staticClass:"deck-tooltip",style:t.tooltipStyle,domProps:{innerHTML:t._s(t.tooltipHTML)}})])},I=[],x=m(B,E,I,!1,null,null);const F=x.exports;function O(i){return new Worker("/assets/XytDataParser.worker-DDEc0p2H.js",{name:i?.name})}const j=c({name:"ModalDialogCustomColorbreakpoint",props:{breakpointsProp:{type:Array,required:!0},colorsProp:{type:Array,required:!0}},data(){return{breakpoints:[],incorrectBreakpoints:[],colors:[]}},mounted(){this.colors=this.colorsProp,this.breakpoints=this.breakpointsProp,this.checkIfBreakpointsAreCorrect()},watch:{breakpointsProp(){this.breakpoints=this.breakpointsProp;for(let i=0;i<this.breakpointsProp.length;i++)this.breakpoints[i]=this.roundToDecimalPlaces(this.breakpoints[i],6),this.breakpointsProp[i]=this.roundToDecimalPlaces(this.breakpointsProp[i],6)},colorsProp(){this.colors=this.colorsProp}},methods:{addColor(){this.breakpointsProp.push(this.breakpointsProp[this.breakpointsProp.length-1]),this.colorsProp.push(this.colorsProp[this.colorsProp.length-1]),this.$emit("addOrRemoveBreakpoint",this.colors,this.breakpoints)},intArrayToHexColor(i){if(i.length!==3)throw new Error("The array must contain exactly 3 elements.");return`#${i.map(s=>{const o=s.toString(16);return o.length===1?"0"+o:o}).join("")}`},hexColorToIntArray(i){if(i=i.replace(/^#/,""),i.length!==6)throw new Error("The hex color string must be 6 characters long.");const t=parseInt(i.slice(0,2),16),e=parseInt(i.slice(2,4),16),s=parseInt(i.slice(4,6),16);return[t,e,s]},roundToDecimalPlaces(i,t){if(t<0)throw new Error("The number of decimal places cannot be negative.");const e=Math.pow(10,t);return Math.round(i*e)/e},addBreakpoint(i){if(i==0)return;const t=this.colorsProp[i],e=this.colorsProp[i+1],s=this.breakpoints[i-1],o=this.breakpoints[i],a=this.calculateAverageColor(t,e),r=(s+o)/2;this.colorsProp.splice(i+1,0,a),this.breakpoints.splice(i,0,r),this.$emit("addOrRemoveBreakpoint",this.colors,this.breakpoints)},calculateAverageColor(i,t){if(i.length!==3||t.length!==3)throw new Error("Colors must be in the format [r, g, b]");return[Math.round((i[0]+t[0])/2),Math.round((i[1]+t[1])/2),Math.round((i[2]+t[2])/2)]},removeBreakpoint(i){this.breakpointsProp.splice(i-1,1),this.colorsProp.splice(i,1),this.$emit("addOrRemoveBreakpoint",this.colors,this.breakpoints),this.checkIfBreakpointsAreCorrect()},closeModalDialog(){this.$emit("close")},colorChange(i,t){const e=this.hexColorToIntArray(i.target.value);this.colors[t]=e,this.$emit("updateColor",this.colors)},changeBreakpoint(i,t){this.breakpoints[t]=i.target.value;for(let e=0;e<this.breakpointsProp.length;e++)this.breakpoints[e]===void 0&&(this.breakpoints[e]=this.roundToDecimalPlaces(this.breakpointsProp[e],6));this.$emit("updateBreakpoint",this.breakpoints),this.checkIfBreakpointsAreCorrect()},checkIfBreakpointsAreCorrect(){let i=Number.NEGATIVE_INFINITY;this.incorrectBreakpoints=[];let t=!0;for(let e=0;e<this.breakpoints.length;e++)this.incorrectBreakpoints[e]=!1,i=this.breakpoints[e]>i?this.breakpoints[e]:i,this.breakpoints[e]<i&&(this.incorrectBreakpoints[e]=!0,t=!1);return t}}});var V=function(){var t=this,e=t._self._c;return t._self._setupProxy,e("div",{staticClass:"modal-dialog"},[e("h2",{staticClass:"modal-dialog-heading"},[t._v("Custom Breakpoints")]),e("div",{staticClass:"color-table"},t._l(t.colors,function(s,o){return e("div",{staticClass:"color"},[e("i",{staticClass:"remove-button fas fa-xs fa-trash",on:{click:function(a){return t.removeBreakpoint(o)}}}),e("input",{staticClass:"color-picker",attrs:{type:"color"},domProps:{value:t.intArrayToHexColor(s)},on:{change:function(a){return t.colorChange(a,o)}}}),o===0?e("p",{staticClass:"comperator",domProps:{innerHTML:t._s("<p>&lt;</p>")}}):e("p",{staticClass:"comperator",domProps:{innerHTML:t._s("<p>&gE;</p>")}}),o!==0?e("input",{staticClass:"breakpoint-picker",class:{"incorrect-number-indicator":t.incorrectBreakpoints[o-1]},attrs:{type:"number",step:".01",placeholder:t.roundToDecimalPlaces(t.breakpointsProp[o-1],6)},on:{change:function(a){return t.changeBreakpoint(a,o-1)}}}):e("input",{staticClass:"breakpoint-picker",class:{"incorrect-number-indicator":t.incorrectBreakpoints[o-1]},attrs:{type:"number",step:".01",placeholder:t.roundToDecimalPlaces(t.breakpointsProp[o],6)},on:{change:function(a){return t.changeBreakpoint(a,o)}}}),e("div",{staticClass:"add-button-container"},[o!=t.colors.length-1&&o!=0?e("i",{staticClass:"remove-button fas fa-sm fa-plus",on:{click:function(a){return t.addBreakpoint(o)}}}):t._e()])])}),0),e("div",{staticClass:"button-holder"},[e("button",{staticClass:"button is-success is-small is-outlined",on:{click:t.addColor}},[t._v("Add Color")]),e("button",{staticClass:"button is-danger is-small is-outlined",on:{click:t.closeModalDialog}},[t._v("Close")])])])},N=[],Y=m(j,V,N,!1,null,"7b970b47");const q=Y.exports,W={messages:{en:{loading:"Loading data...",sorting:"Sorting into bins...",aggregate:"Summary",maxHeight:"3D Height",showDetails:"Show Details",selection:"Selection",areas:"Areas",count:"Count",promptCRS:`Enter the coordinate reference system, e.g. EPSG:25832

These coordinates are not in long/lat format. To fix this permanently, convert them to long/lat or add "# EPSG:xxxx" to your CSV header`},de:{loading:"Dateien laden...",sorting:"Sortieren...",aggregate:"Daten",maxHeight:"3-D Höhe",showDetails:"Details anzeigen",selection:"Ausgewählt",areas:"Orte",count:"Anzahl"}}},X=c({name:"XYTime",i18n:W,components:{CollapsiblePanel:C,DrawingTool:v,LegendBox:S,TimeSlider:z,ZoomButtons:L,XyTimeDeckMap:F,ModalDialogCustomColorbreakpoint:q},props:{root:{type:String,required:!0},subfolder:{type:String,required:!0},yamlConfig:String,config:Object,thumbnail:Boolean},data(){return{globalState:h.state,guiConfig:{buckets:7,exponent:4,radius:5,"clip max":100,"color ramp":"viridis",colorRamps:["bathymetry","electric","inferno","jet","magma","par","viridis"],flip:!1,"Custom breakpoints...":this.toggleModalDialog,"manual breaks":""},backgroundLayers:null,minRadius:5,maxRadius:50,showCustomBreakpoints:!1,viewId:`xyt-id-${Math.floor(1e12*Math.random())}`,configId:`gui-config-${Math.floor(1e12*Math.random())}`,timeLabels:[0,1],startTime:0,isAnimating:!1,timeFilter:[0,3599],colors:[[128,128,128],[128,128,128]],breakpoints:[0],range:[1/0,-1/0],timeRange:[1/0,-1/0],legendStore:null,standaloneYAMLconfig:{title:"",description:"",file:"",projection:"",thumbnail:"",radius:250,maxHeight:0,center:null,zoom:9},YAMLrequirementsXY:{file:""},columnLookup:[],gzipWorker:null,vizDetails:{title:"",description:"",file:"",projection:"",thumbnail:"",center:null,zoom:9,buckets:5,exponent:4,clipMax:100,radius:5,colorRamp:"viridis",flip:!1,breakpoints:null},myState:{statusMessage:"",subfolder:"",yamlConfig:"",thumbnail:!1},pointLayers:[],isLoaded:!1,animator:null,guiController:null,resizer:null,thumbnailUrl:"url('assets/thumbnail.jpg') no-repeat;",ANIMATE_SPEED:4,animationElapsedTime:0}},async mounted(){if(this.$store.commit("setFullScreen",!this.thumbnail),this.myState.thumbnail=this.thumbnail,this.myState.yamlConfig=this.yamlConfig||"",this.myState.subfolder=this.subfolder,await this.getVizDetails(),await this.buildThumbnail(),!this.thumbnail){this.setupGui(),this.myState.statusMessage=`${this.$i18n.t("loading")}`,this.isLoaded||await this.loadFiles();try{this.backgroundLayers=new P({vizDetails:this.vizDetails,fileApi:this.fileApi,subfolder:this.subfolder}),await this.backgroundLayers.initialLoad()}catch{this.$emit("error","Error loading background layers")}}},beforeDestroy(){this.resizer?.disconnect();try{this.gzipWorker&&(this.gzipWorker.postMessage({terminate:!0}),this.gzipWorker.terminate()),this.guiController&&this.guiController.destroy()}catch(i){console.warn(i)}this.animator&&window.cancelAnimationFrame(this.animator),this.$store.commit("setFullScreen",!1)},computed:{fileApi(){return new y(this.fileSystem,h)},fileSystem(){const i=this.$store.state.svnProjects.filter(t=>t.slug===this.root);if(i.length===0)throw console.log("no such project"),Error;return i[0]},urlThumbnail(){return this.thumbnailUrl}},watch:{},methods:{toggleModalDialog(){this.showCustomBreakpoints=!this.showCustomBreakpoints},handleTimeSliderValues(i){this.animationElapsedTime=i[0],this.timeFilter=i,this.timeLabels=[this.convertSecondsToClockTimeMinutes(i[0]),this.convertSecondsToClockTimeMinutes(i[1])]},setupGui(){this.guiController=new f({title:"Settings",injectStyles:!0,width:200,container:document.getElementById(this.configId)||void 0});const i=this.guiController;i.add(this.guiConfig,"radius",this.minRadius,this.maxRadius,1);const t=i.addFolder("colors");t.add(this.guiConfig,"color ramp",this.guiConfig.colorRamps).onChange(this.setColors),t.add(this.guiConfig,"flip").onChange(this.setColors);const e=i.addFolder("breakpoints");e.add(this.guiConfig,"buckets",2,19,1).onChange(this.setColors),e.add(this.guiConfig,"clip max",0,100,1).onChange(this.setColors),e.add(this.guiConfig,"exponent",1,10,1).onChange(this.setColors),e.add(this.guiConfig,"Custom breakpoints...",1,100,1)},async solveProjection(){if(!this.thumbnail){console.log("WHAT PROJECTION:");try{const i=await this.fileApi.getFileText(this.myState.subfolder+"/"+this.myState.yamlConfig);this.vizDetails=u.parse(i)}catch(i){console.error(i),this.$emit("error",""+i)}}},async getVizDetails(){if(this.config){this.validateYAML(),this.vizDetails=Object.assign({},this.config),this.setCustomGuiConfig();return}new RegExp(".*(yml|yaml)$").test(this.myState.yamlConfig)?await this.loadStandaloneYAMLConfig():this.setConfigForRawCSV()},setCustomGuiConfig(){this.config&&(this.config.radius>=this.minRadius&&this.config.radius<=this.maxRadius&&(this.guiConfig.radius=this.config.radius),Object.prototype.toString.call(this.config.breakpoints)==="[object Array]"?this.setManualBreakpoints(this.config.breakpoints):this.config.breakpoints&&(this.config.breakpoints.values.length+1!=this.config.breakpoints.colors.length?this.$emit("error",{type:l.ERROR,msg:"Wrong number of colors and values for the breakpoints.",desc:`Number of colors: ${this.config.breakpoints.colors.length}, Number of values: ${this.config.breakpoints.values.length}, Must apply: Number of colors = number of values plus one.`}):(this.guiConfig.buckets=this.config.breakpoints.colors.length,this.breakpoints=this.config.breakpoints.values,this.colors=this.config.breakpoints.colors)))},setManualBreakpoints(i){this.breakpoints=i,this.guiConfig.buckets=1+i.length},setConfigForRawCSV(){let i="EPSG:4326";this.vizDetails=Object.assign(this.vizDetails,{title:"Point Data: "+this.myState.yamlConfig,description:this.myState.yamlConfig,file:this.myState.yamlConfig,projection:i,center:this.vizDetails.center,zoom:this.vizDetails.zoom}),this.$emit("title",this.vizDetails.title||this.vizDetails.file)},async loadStandaloneYAMLConfig(){try{const i=this.myState.yamlConfig.indexOf("/")>-1?this.myState.yamlConfig:this.myState.subfolder+"/"+this.myState.yamlConfig,t=await this.fileApi.getFileText(i);this.standaloneYAMLconfig=Object.assign({},u.parse(t)),this.validateYAML(),this.setVizDetails()}catch(i){console.log("failed"+i),this.$emit("error",`File not found: ${this.myState.subfolder}/${this.myState.yamlConfig}`)}},validateYAML(){const i=new RegExp(".*(yml|yaml)$").test(this.myState.yamlConfig);let t={};i?(console.log("has yaml"),t=this.standaloneYAMLconfig):(console.log("no yaml"),t=this.config);for(const e in this.YAMLrequirementsXY)e in t||this.$emit("error",{type:l.ERROR,msg:`XYTime missing required key: ${e}`,desc:`XYTime requires keys: ${Object.keys(this.YAMLrequirementsXY)}`});t.radius==0&&this.$emit("error",{type:l.WARNING,msg:"Radius set to zero",desc:"Radius can not be zero, preset value used instead. "}),(t.zoom<5||t.zoom>50)&&this.$emit("error",{type:l.WARNING,msg:"Zoom is out of the recommended range ",desc:"Zoom levels should be between 5 and 50. "})},setVizDetails(){this.vizDetails=Object.assign({},this.vizDetails,this.standaloneYAMLconfig);const i=this.vizDetails.title?this.vizDetails.title:"Point Data: "+this.vizDetails.file;this.$emit("title",i),this.vizDetails.buckets&&(this.guiConfig.buckets=this.vizDetails.buckets),this.vizDetails.exponent&&(this.guiConfig.exponent=this.vizDetails.exponent),this.vizDetails.radius&&(this.guiConfig.radius=this.vizDetails.radius),this.vizDetails.clipMax&&(this.guiConfig["clip max"]=this.vizDetails.clipMax),this.vizDetails.colorRamp&&(this.guiConfig["color ramp"]=this.vizDetails.colorRamp)},async buildThumbnail(){if(this.thumbnail&&this.vizDetails.thumbnail)try{const t=await(await this.fileApi.getFileBlob(this.myState.subfolder+"/"+this.vizDetails.thumbnail)).arrayBuffer(),e=k.arrayBufferToBase64(t);e&&(this.thumbnailUrl=`center / cover no-repeat url(data:image/png;base64,${e})`)}catch(i){console.error(i)}},async parseCSVFile(i){this.myState.statusMessage="Loading file...";let t=0;this.gzipWorker=new O,this.gzipWorker.onmessage=async e=>{if(e.data.status)this.myState.statusMessage=e.data.status;else if(e.data.error)this.myState.statusMessage=e.data.error,this.$emit("error",{type:l.ERROR,msg:"XYT Loading Error",desc:`Error loading: ${this.myState.subfolder}/${this.vizDetails.file}`});else if(e.data.finished)this.finishedLoadingData(t,e.data);else if(e.data.needCRS){this.gzipWorker&&this.gzipWorker.terminate();let s=prompt(""+this.$t("promptCRS"))||"EPSG:25833";Number.isFinite(parseInt(s))&&(s=`EPSG:${s}`),this.vizDetails.projection=s.toUpperCase(),this.parseCSVFile(i)}else{const s=e.data.time.length;t||this.setFirstZoom(e.data.coordinates,s),t+=s,this.timeRange=[Math.min(this.timeRange[0],e.data.time[0]),Math.max(this.timeRange[1],e.data.time[s-1])],this.pointLayers.push(e.data)}},this.gzipWorker.postMessage({filepath:i,fileSystem:this.fileSystem,projection:this.vizDetails.projection})},setFirstZoom(i,t){const e=.5*(i[0]+i[t*2-2]),s=.5*(i[1]+i[t*2-1]);Number.isFinite(e)&&Number.isFinite(s)&&h.commit("setMapCamera",Object.assign({},h.state.viewState,{longitude:e,latitude:s,zoom:10}))},finishedLoadingData(i,t){console.log("ALL DONE",{totalRows:i,data:t.range,time:this.timeRange}),this.myState.statusMessage="",this.timeFilter=[this.timeRange[0],this.timeRange[0]+3599],this.range=t.range,this.gzipWorker&&this.gzipWorker.terminate(),this.setColors();const e=this.pointLayers[0].coordinates,s=e[0]+e[e.length-2],o=e[1]+e[e.length-1];this.$store.commit("setMapCamera",{center:[.5*s,.5*o],zoom:6,bearing:0,pitch:0}),this.isLoaded=!0},animate(){if(!this.isAnimating)return;this.animationElapsedTime=this.ANIMATE_SPEED*(Date.now()-this.startTime);const i=this.animationElapsedTime+this.timeRange[0];i>this.timeRange[1]&&(this.startTime=Date.now(),this.animationElapsedTime=0);const t=this.timeFilter[1]-this.timeFilter[0];this.timeFilter=[i,i+t],this.animator=window.requestAnimationFrame(this.animate)},toggleAnimation(){this.isAnimating=!this.isAnimating,this.isAnimating&&(this.animationElapsedTime=this.timeFilter[0]-this.timeRange[0],this.startTime=Date.now()-this.animationElapsedTime/this.ANIMATE_SPEED,this.animate())},setColors(){const i=this.guiConfig.exponent;if(this.vizDetails.breakpoints&&typeof this.vizDetails.breakpoints=="object"&&!Array.isArray(this.vizDetails.breakpoints)&&"colors"in this.vizDetails.breakpoints)if(typeof this.vizDetails.breakpoints.colors[0]=="string"){let t=this.vizDetails.breakpoints.colors.map(e=>{const s=e.match(/[A-Za-z0-9]{2}/g),o=s?s.map(a=>parseInt(a,16)):[0,0,0];return[o[0],o[1],o[2]]});this.colors=[...t]}else this.colors=[...this.vizDetails.breakpoints.colors];else if(this.config&&this.config.breakpoints&&typeof this.config.breakpoints=="object"&&!Array.isArray(this.config.breakpoints)&&"colors"in this.config.breakpoints)this.colors=this.config.breakpoints.colors;else{const t=this.guiConfig["color ramp"];let e=b({colormap:t,nshades:256,format:"rba",alpha:1}).map(a=>[a[0],a[1],a[2]]);this.guiConfig.flip&&(e=e.reverse());const s=256/(this.guiConfig.buckets-1),o=[];for(let a=0;a<this.guiConfig.buckets-1;a++)o.push(e[Math.round(s*a)]);o.push(e[255]),this.colors=o}if(this.vizDetails.breakpoints)Array.isArray(this.vizDetails.breakpoints)&&this.vizDetails.breakpoints.length>0?this.breakpoints=this.vizDetails.breakpoints:typeof this.vizDetails.breakpoints=="object"&&!Array.isArray(this.vizDetails.breakpoints)&&"values"in this.vizDetails.breakpoints&&(this.breakpoints=this.vizDetails.breakpoints.values,"colors"in this.vizDetails.breakpoints&&(this.guiConfig.buckets=this.vizDetails.breakpoints.colors.length));else if(this.config&&this.config.breakpoints)Array.isArray(this.config.breakpoints)?this.breakpoints=this.config.breakpoints:typeof this.config.breakpoints=="object"&&!Array.isArray(this.config.breakpoints)&&"values"in this.config.breakpoints&&(this.breakpoints=this.config.breakpoints.values,"colors"in this.config.breakpoints&&(this.guiConfig.buckets=this.config.breakpoints.colors.length));else{const e=Math.pow(this.range[1],1/i)*this.guiConfig["clip max"]/100,s=[];for(let o=1;o<this.guiConfig.buckets;o++){const a=e*o/this.guiConfig.buckets,r=Math.pow(a,i);s.push(r)}this.breakpoints=s}this.setLegend(this.colors,this.breakpoints)},setLegend(i,t){this.range[1]-this.range[0]!==0&&(this.legendStore=new D,this.legendStore.setLegendSection({section:"Legend",column:"Legend",values:i.map((e,s)=>{const o=t[s==0?s:s-1];let a=""+Math.round(1e6*o)/1e6;return s==0&&(a="< "+a),s==i.length-1&&(a="> "+a),{label:a,value:e}})}),this.breakpoints=t)},async loadFiles(){await this.fileApi.getChromePermission(this.fileSystem.handle);try{let i=`${this.myState.subfolder}/${this.vizDetails.file}`;await this.parseCSVFile(i),this.$emit("isLoaded")}catch(i){console.error(i),this.myState.statusMessage=""+i,this.$emit("error",{type:l.ERROR,msg:"Loading/Parsing Error",desc:`Error loading/parsing: ${this.myState.subfolder}/${this.vizDetails.file}`})}},convertSecondsToClockTimeMinutes(i){const t=Math.floor(i/3600),e=Math.floor((i-t*3600)/60),s={h:`${t}`,m:`${e}`.padStart(2,"0")};return`${s.h}:${s.m}`}}});var H=function(){var t=this,e=t._self._c;return t._self._setupProxy,e("div",{staticClass:"viz-plugin",class:{"hide-thumbnail":!t.thumbnail},attrs:{oncontextmenu:"return false",id:`id-${t.viewId}`}},[t.isLoaded&&!t.thumbnail?e("xy-time-deck-map",{staticClass:"map-layer",attrs:{viewId:t.viewId,pointLayers:t.pointLayers,timeFilter:t.timeFilter,dark:t.globalState.isDarkMode,colors:t.colors,breakpoints:t.breakpoints,radius:t.guiConfig.radius,mapIsIndependent:!1,bgLayers:t.backgroundLayers}}):t._e(),t.thumbnail?t._e():e("zoom-buttons",{attrs:{corner:"top-left"}}),e("div",{staticClass:"top-right"},[e("div",{staticClass:"gui-config",attrs:{id:t.configId}})]),e("div",{staticClass:"bottom-left"},[t.legendStore?e("div",{staticClass:"legend-area"},[e("legend-box",{attrs:{legendStore:t.legendStore}})],1):t._e()]),t.isLoaded?e("time-slider",{staticClass:"time-slider-area",attrs:{range:t.timeRange,activeTimeExtent:t.timeFilter,labels:t.timeLabels,isAnimating:t.isAnimating},on:{timeExtent:t.handleTimeSliderValues,toggleAnimation:t.toggleAnimation,drag:function(s){t.isAnimating=!1}}}):t._e(),!t.thumbnail&&t.myState.statusMessage?e("div",{staticClass:"message"},[e("p",{staticClass:"status-message"},[t._v(t._s(t.myState.statusMessage))])]):t._e(),t.showCustomBreakpoints?e("modal-dialog-custom-colorbreakpoint",{attrs:{breakpointsProp:t.breakpoints,colorsProp:t.colors},on:{close:function(s){t.showCustomBreakpoints=!1},updateColor:s=>t.setLegend(s,t.breakpoints),updateBreakpoint:s=>t.setLegend(t.colors,s),addOrRemoveBreakpoint:(s,o)=>t.setLegend(s,o)}}):t._e()],1)},G=[],Z=m(X,H,G,!1,null,"c343dbdc");const Mt=Z.exports;export{Mt as default};
