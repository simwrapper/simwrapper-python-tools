import{r as C,C as L}from"./Coords-C-Mhj230.js";import{c as D}from"./turf.es-BzqbG201.js";import{N as y,b as w}from"./ColorsAndWidths-CaSMrknU.js";import{r as v,G as A}from"./geo-utils-CCVst3B0.js";import{D as B}from"./index-BX7jQcoh.js";import{G as F}from"./geojson-layer-uU2lasyR.js";import{s as T}from"./sequential-pySAYR1V.js";import{o as k}from"./threshold-CrWFx_nu.js";import{r as W}from"./cubehelix-BzW-tINw.js";class R{bgLayers={};fileApi;subfolder;vizDetails;constructor(s){this.vizDetails=s.vizDetails,this.subfolder=s.subfolder,this.fileApi=s.fileApi}layers(){const s=[],e=[];for(const i of Object.keys(this.bgLayers).reverse()){const r=this.bgLayers[i],f=new F({id:`background-layer-${i}`,beforeId:r.onTop?void 0:"water",data:r.features,getFillColor:o=>o.properties.__fill__,getLineColor:r.borderColor,getLineWidth:r.borderWidth,getText:o=>o.properties.label,getTextSize:12,getTextColor:[255,255,255,255],getTextBackgroundColor:[0,0,0,255],pointType:"circle+text",textFontWeight:"bold",lineWidthUnits:"pixels",autohighlight:!1,opacity:r.opacity,pickable:!1,stroked:!!r.borderWidth,fp64:!1,parameters:{depthTest:!1},visible:r.visible});r.onTop?e.push(f):s.push(f)}return{layersBelow:s,layersOnTop:e}}async loadShapefileFeatures(s){console.log("loading",s);const e=`${this.subfolder}/${s}`;let i,r,f,o={};try{i=await this.fileApi.getFileBlob(e)}catch{throw Error("Error loading "+e)}try{let t=e;t.endsWith(".shp")&&(t=t.slice(0,-4)+".dbf"),t.endsWith(".SHP")&&(t=t.slice(0,-4)+".DBF"),t.endsWith(".Shp")&&(t=t.slice(0,-4)+".Dbf"),r=await this.fileApi.getFileBlob(t),f=await(await r)?.arrayBuffer()}catch{}try{const t=await(await i)?.arrayBuffer();if(!t)return[];o=await C(t,f),o.features=o.features.filter(g=>!!g.geometry)}catch(t){throw console.error(t),Error(`Error loading shapefile ${e}`)}let h=B,l=e;l.endsWith(".shp")&&(l=l.slice(0,-4)+".prj"),l.endsWith(".SHP")&&(l=l.slice(0,-4)+".PRJ"),l.endsWith(".Shp")&&(l=l.slice(0,-4)+".Prj");try{h=await this.fileApi.getFileText(l)}catch(t){console.error(""+t)}const d=this.vizDetails.projection||L.guessProjection(h);d&&(o=v.toWgs84(o,d,L.allEPSGs));function b(t){return Array.isArray(t[0])?b(t[0]):[t[0],t[1]]}const p=b(o.features[0].geometry.coordinates);if(Math.abs(p[0])>180||Math.abs(p[1])>90)throw Error("Coordinates not lon/lat. Try adding projection to YAML, or provide a .prj file");return o.features}async loadGeoPackage(s){console.log("loading",s);const e=`${this.subfolder}/${s}`,r=await(await this.fileApi.getFileBlob(e)).arrayBuffer();return A.loadGeoPackageFromBuffer(r)}async initialLoad(){if(this.bgLayers={},!this.vizDetails.backgroundLayers){this.vizDetails.backgroundLayers={};return}for(const s of Object.keys(this.vizDetails.backgroundLayers)){console.log("LOADING",s);const e=this.vizDetails.backgroundLayers[s];if(!e.shapes)continue;let i=[];const r=e.shapes;r.startsWith("http")?i=(await fetch(r).then(async a=>await a.json())).features:r.toLocaleLowerCase().endsWith(".gpkg")?i=await this.loadGeoPackage(r):r.toLocaleLowerCase().endsWith(".shp")?i=await this.loadShapefileFeatures(r):i=(await this.fileApi.getFileJson(`${this.subfolder}/${r}`)).features;let f=null,o;if(e.fill&&!e.fill.startsWith("#")){let a=!1;if(e.fill.startsWith("scheme")&&(a=!0),o=y[e.fill],o||(o=y[`interpolate${e.fill}`]),o||(o=y[`scheme${e.fill}`],o&&(a=!0)),o){let n=T(o);n||(n=k(o)),f=Array.from({length:i.length},(c,m)=>{const u=a?W(o[m%o.length]):W(n(m/(i.length-1)));return[u.r,u.g,u.b]})}}let h;o||(h=w([e.fill])[0]);for(let a=0;a<i.length;a++){const n=i[a];let c=[64,64,192,64];e.fill&&(c=h||f[a]),n.properties.__fill__=c}if(e.label){const a=[];for(const n of i){const c=D(n);c.properties||(c.properties={}),c.properties.label=n.properties[e.label],a.push(c)}i=i.concat(a)}const l=e.borderColor?w([e.borderColor])[0]:[255,255,255];let d="borderWidth"in e?parseFloat(e.borderWidth):0;const b=e.opacity||1;let p=!0;"visible"in e&&(p=e.visible);let t=!1;"onTop"in e&&(t=!!e.onTop),"ontop"in e&&(t=!!e.ontop);const g={features:i,opacity:b,borderWidth:d,borderColor:l,visible:p,onTop:t};this.bgLayers[s]=g,this.bgLayers={...this.bgLayers},console.log("LOADED BG LAYERS")}}}export{R as B};
