import{a as R,d as V,g as L,m as J,n as _,D as B,i as D}from"./index-CHe7BiNX.js";import{r as H}from"./index-emsa1Orl.js";import{c as F}from"./turf.es-BzqbG201.js";import{r as q,G}from"./geo-utils-B8BYiwEx.js";import{Y as j}from"./index-DFKcNkqO.js";import{G as U,S as K,M as Y,i as z}from"./ModalIdColumnPicker-Ba40fVKg.js";import{r as X,q as I,C as w}from"./ColorsAndWidths-DQGojr_h.js";import{d as Q,H as Z}from"./HTTPFileSystem-Cf8G_bcW.js";import{O,L as tt}from"./LineOffsetLayer-BLObRkrp.js";import{M as et}from"./mapbox-overlay-BWTNBTi1.js";import{D as M}from"./data-filter-extension-CLr7Gtu_.js";import{L as it}from"./line-layer-BsT1dmhn.js";import{G as st}from"./geojson-layer-ClBV_VpI.js";import{r as N}from"./color-CBfzWUsH.js";import{B as at}from"./BackgroundMapOnTop-84v7Y9j_.js";import{V as ot}from"./VizConfigurator-1-9a3OUI.js";import{L as rt}from"./LegendBox-DCW8O5g7.js";import{Z as nt}from"./ZoomButtons-B7tt6RkT.js";import{D as lt}from"./DrawingTool-CaOc8yNx.js";import{c as dt,D as ht}from"./DashboardDataManager-DadBWrpd.js";import{C as k}from"./Coords-In7NRIX8.js";import{L as ct}from"./LegendStore-CGgeb9zL.js";import{s as ut}from"./sequential-DVUtHXFn.js";import"./papaparse.min-scs4TfNl.js";import"./PathOffsetLayer-DAEGMsHr.js";import"./path-layer-BllYebBs.js";import"./layer-GQvgsG1_.js";import"./bisect-CYcslDjR.js";import"./threshold-BCEk2Ck_.js";import"./init-DZFJxo1o.js";import"./index-_doEQLKC.js";import"./viridis-Dsxo9Ge-.js";import"./rainbow-DYLOPEGn.js";import"./fxp-DjoqftHf.js";import"./layer-extension-CCnGoUTU.js";import"./text-layer-Cpq7KRgR.js";import"./lodash-IhglTFO4.js";import"./FileSelector-CwXbclxk.js";import"./index-g5R23Vjl.js";import"./group-hI8ly2Wr.js";import"./pow-BJlj2e5q.js";import"./precisionRound-CGdWDuur.js";var x,W;function ft(){if(W)return x;W=1;function e(i){return i>=55296&&i<=56319}function t(i){return i>=56320&&i<=57343}return x=function(s,a,o){if(typeof a!="string")throw new Error("Input must be string");for(var n=a.length,r=0,d,c,l=0;l<n;l+=1){if(d=a.charCodeAt(l),c=a[l],e(d)&&t(a.charCodeAt(l+1))&&(l+=1,c+=a[l]),r+=s(c),r===o)return a.slice(0,l+1);if(r>o)return a.slice(0,l-c.length+1)}return a},x}var $,A;function mt(){if(A)return $;A=1;function e(i){return i>=55296&&i<=56319}function t(i){return i>=56320&&i<=57343}return $=function(s){if(typeof s!="string")throw new Error("Input must be string");for(var a=s.length,o=0,n=null,r=null,d=0;d<a;d++)n=s.charCodeAt(d),t(n)?r!=null&&e(r)?o+=1:o+=3:n<=127?o+=1:n>=128&&n<=2047?o+=2:n>=2048&&n<=65535&&(o+=3),r=n;return o},$}var S,P;function pt(){if(P)return S;P=1;var e=ft(),t=mt();return S=e.bind(null,t),S}var T,E;function gt(){if(E)return T;E=1;var e=pt(),t=/[\/\?<>\\:\*\|"]/g,i=/[\x00-\x1f\x80-\x9f]/g,s=/^\.+$/,a=/^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i,o=/[\. ]+$/;function n(r,d){if(typeof r!="string")throw new Error("Input must be string");var c=r.replace(t,d).replace(i,d).replace(s,d).replace(a,d).replace(o,d);return e(c,255)}return T=function(r,d){var c=d&&d.replacement||"",l=n(r,c);return c===""?l:n(l,"")},T}var yt=gt();const bt=R(yt),Ct=V({name:"GeojsonDeckComponent",props:{features:{type:Array},bgLayers:{type:Object,required:!0},cbTooltip:{type:Function,required:!0},cbClickEvent:{type:Function,required:!0},dark:{type:Boolean,required:!0},featureFilter:{type:Float32Array,required:!0},fillColors:{type:[String,Uint8ClampedArray],required:!0},fillHeights:{type:[Number,Float32Array],required:!0},highlightedLinkIndex:{type:Number},initialView:{type:Object},isRGBA:{type:Boolean,required:!0},isAtlantis:{type:Boolean,required:!0},lineColors:{type:[String,Uint8ClampedArray]},lineWidths:{type:[Number,Float32Array],required:!0},mapIsIndependent:{type:Boolean,required:!0},opacity:{type:Number,required:!0},pointRadii:{type:[Number,Float32Array],required:!0},redraw:{type:Number,required:!0},screenshot:{type:Number,required:!0},viewId:{type:Number,required:!0}},data(){return{mymap:null,deckOverlay:null,globalState:L.state,screenshotCount:this.screenshot,tooltipHTML:"",tooltipStyle:{position:"absolute",padding:"4px 8px",display:"block",top:0,left:0,color:this.dark?"#ccc":"#223",backgroundColor:this.dark?"#2a3c4f":"white",zIndex:2e4}}},watch:{screenshot(){this.mymap&&this.deckOverlay&&K.saveMapWithOverlay(this.mymap)},layers(){this.deckOverlay&&this.deckOverlay.setProps({layers:this.layers})},dark(){let e;this.hasBackgroundMap?e=`/map-styles/${this.globalState.isDarkMode?"dark":"positron"}.json`:e={version:8,sources:{},layers:[]},this.mymap?.setStyle(e)}},computed:{isTakingScreenshot(){return this.screenshot>this.screenshotCount},isStroked(){return!!this.lineColors&&this.lineWidths!==0},hasBackgroundMap(){return!this.isAtlantis},cbFillColor(){let e;if(typeof this.fillColors=="string"){const t=N(this.fillColors);e=[t.r,t.g,t.b]}else e=(t,i)=>this.isRGBA?[this.fillColors[i.index*4+0],this.fillColors[i.index*4+1],this.fillColors[i.index*4+2],this.fillColors[i.index*4+3]]:[this.fillColors[i.index*3+0],this.fillColors[i.index*3+1],this.fillColors[i.index*3+2],255];return e},cbLineColor(){let e;if(typeof this.lineColors=="string"){const t=N(this.lineColors);e=[t.r,t.g,t.b],this.isStroked||e.push(0)}else e=(t,i)=>i?.index?this.lineColors?[this.lineColors[i.index*3+0],this.lineColors[i.index*3+1],this.lineColors[i.index*3+2],255]:[0,0,0,0]:[0,0,0,0];return e},cbLineWidth(){let e;return typeof this.lineWidths=="number"?e=this.lineWidths:e=(t,i)=>this.lineWidths[i.index],e},cbPointRadius(){let e;return typeof this.pointRadii=="number"?e=this.pointRadii:e=(t,i)=>this.pointRadii[i.index],e},cbFillHeight(){let e;return typeof this.fillHeights=="number"?e=this.fillHeights:e=(t,i)=>this.fillHeights[i.index],e},extraLayers(){const e=[],t=[];for(const i of Object.keys(this.bgLayers).reverse()){const s=this.bgLayers[i],a=new st({id:`background-layer-${i}`,data:s.features,getFillColor:o=>o.properties.__fill__,getLineColor:s.borderColor,getLineWidth:s.borderWidth,getText:o=>o.properties.label,getTextSize:12,getTextColor:[255,255,255,255],getTextBackgroundColor:[0,0,0,255],pointType:"circle+text",textFontWeight:"bold",lineWidthUnits:"pixels",autohighlight:!1,opacity:s.opacity,pickable:!1,stroked:!!s.borderWidth,fp64:!1,parameters:{depthTest:!1},visible:s.visible});s.onTop?t.push(a):(a.beforeId="water",e.push(a))}return{backgroundLayers:e,onTopLayers:t}},lineLayers(){if(!this.isStroked)return{linksData:[],hasPolygons:!0};const e=[];let t=!1;const i=[];return(this.features||[]).forEach((a,o)=>{let n;switch(a.geometry.type){case"Polygon":n=a.geometry.coordinates[0],t=!0;break;case"MultiPolygon":n=a.geometry.coordinates[0][0],t=!0;break;case"LineString":n=a.geometry.coordinates;break;case"MultiLineString":n=a.geometry.coordinates[0];break;case"Point":case"MultiPoint":default:return t=!0,{linksData:[],hasPolygons:t}}if(!n)return console.warn(`---Feature ${o+1} has no coordinates:`),console.warn(a),{linksData:[],hasPolygons:t};const r=!Array.isArray(this.cbLineColor),d=typeof this.cbLineWidth!="number";for(let c=1;c<n.length;c++){const l={path:[n[c-1],n[c]]};r&&(l.color=this.cbLineColor(null,{index:o})),d&&(l.width=this.cbLineWidth(null,{index:o})),l.feature_idx=o,this.featureFilter.length&&i.push(this.featureFilter[o]),e.push(l)}}),{linksData:e,hasPolygons:t,filterValues:i}},layers(){const e=[...this.extraLayers.backgroundLayers];if(this.lineLayers.hasPolygons&&e.push(new U({id:"geoJsonOffsetLayer",beforeId:"water",data:this.features,getLineWidth:this.cbLineWidth,getLineColor:this.cbLineColor,getFillColor:this.cbFillColor,getPointRadius:this.cbPointRadius,getElevation:this.cbFillHeight,extruded:!!this.fillHeights,highlightedObjectIndex:this.highlightedLinkIndex,highlightColor:[255,255,255,160],lineWidthUnits:"pixels",lineWidthScale:1,lineWidthMinPixels:0,lineWidthMaxPixels:50,getOffset:O.RIGHT,opacity:this.opacity,pickable:!0,pointRadiusUnits:"pixels",pointRadiusMinPixels:2,stroked:this.isStroked,useDevicePixels:this.isTakingScreenshot,fp64:!1,updateTriggers:{getFillColor:this.fillColors,getLineColor:this.lineColors,getLineWidth:this.lineWidths,getPointRadius:this.pointRadii,getElevation:this.fillHeights,getFilterValue:this.featureFilter},transitions:{getFillColor:300,getLineColor:300,getLineWidth:300,getPointRadius:300},parameters:{depthTest:!!this.fillHeights,fp64:!1},extensions:[new M({filterSize:1})],filterRange:[0,1],getFilterValue:(t,i)=>this.featureFilter[i.index]})),this.isStroked){const t=this.lineLayers.filterValues||this.featureFilter,i=typeof this.cbLineWidth=="number"?it:tt,s=Array.isArray(this.cbLineColor)?this.cbLineColor:a=>a.color;e.push(new i({id:"linksLayer",data:this.lineLayers.linksData,getColor:s,getWidth:typeof this.cbLineWidth=="number"?this.cbLineWidth:a=>a.width,getSourcePosition:a=>a.path[0],getTargetPosition:a=>a.path[1],pickable:!0,autoHighlight:!0,highlightedObjectIndex:this.highlightedLinkIndex==-1?null:this.highlightedLinkIndex,highlightColor:[255,255,255,160],opacity:1,widthUnits:"pixels",widthMinPixels:1,offsetDirection:O.RIGHT,transitions:{getColor:300,getWidth:300},parameters:{depthTest:!!this.fillHeights,fp64:!1},extensions:[new M({filterSize:1})],filterRange:[0,1],getFilterValue:(a,o)=>t[o.index]}))}return e.concat(this.extraLayers.onTopLayers),e}},mounted(){let e;this.hasBackgroundMap?e=`/map-styles/${this.globalState.isDarkMode?"dark":"positron"}.json`:e={version:8,sources:{},layers:[]};const t=`map-${this.viewId}`,i=this.globalState.viewState.center;this.mymap=new J.Map({container:t,style:e,center:i,zoom:7,canvasContextAttributes:{preserveDrawingBuffer:!0}}),this.mymap.on("move",this.handleMove),this.mymap.on("style.load",()=>{this.deckOverlay=new et({interleaved:!0,layers:this.layers,onClick:this.handleClick,onHover:this.handleHover,onDrag:this.handleHover,pickingRadius:2,getCursor:s=>s.isHovering?"pointer":"grab"}),this.mymap?.addControl(this.deckOverlay)})},beforeDestroy(){this.deckOverlay&&this.mymap?.removeControl(this.deckOverlay),this.mymap?.remove(),this.mymap=null},methods:{handleMove(){if(this.mapIsIndependent)return;const e=this.mymap?.getCenter(),t={center:[e.lng,e.lat],zoom:this.mymap?.getZoom(),bearing:this.mymap?.getBearing(),pitch:this.mymap?.getPitch(),jump:!0};L.commit("setMapCamera",t)},getTooltip({object:e,index:t}){let i=t;e&&"feature_idx"in e&&(i=e.feature_idx),this.cbTooltip&&this.cbTooltip(i,e)},handleClick(e,t){this.cbClickEvent&&this.cbClickEvent(e)},handleHover(e,t){if(e.index==-1){this.cbTooltip(-1,null);return}this.getTooltip(e)}}});var vt=function(){var t=this,i=t._self._c;return t._self._setupProxy,i("div",{staticClass:"deck-map flex-col"},[i("div",{staticClass:"map-container",attrs:{id:`map-${t.viewId}`}})])},wt=[],Lt=_(Ct,vt,wt,!1,null,null);const Dt=Lt.exports,kt="/assets/icon-blue-ramp-D1d4h-6x.png",Ft=V({name:"ShapeFilePlugin",components:{BackgroundMapOnTop:at,LegendBox:rt,GeojsonLayer:Dt,ModalIdColumnPicker:Y,VizConfigurator:ot,ZoomButtons:nt,DrawingTool:lt},props:{root:{type:String,required:!0},subfolder:{type:String,required:!0},datamanager:{type:Object},configFromDashboard:{type:Object},yamlConfig:String,thumbnail:Boolean},data(){return{icons:{blueramp:kt},opacitySlider:50,avroNetwork:null,isAtlantis:!1,isAreaMode:!1,isAvroFile:!1,isDraggingDivider:0,isDragHappening:!1,isLoaded:!1,dragStartWidth:200,legendSectionWidth:200,boundaries:[],centroids:[],cbDatasetJoined:void 0,legendStore:new ct,chosenNewFilterColumn:"",boundaryDataTable:{},dataFillColors:"#888",dataLineColors:"",dataLineWidths:1,dataPointRadii:5,dataFillHeights:0,dataCalculatedValues:null,dataNormalizedValues:null,constantLineWidth:null,dataCalculatedValueLabel:"",globalStore:L,globalState:L.state,layerId:Math.floor(1e12*Math.random()),dbClearTooltip:{},wantToClearTooltip:!1,activeColumn:"",useCircles:!1,sliderOpacity:100,maxValue:1e3,expColors:!1,isRGBA:!1,statusText:"Loading...",filters:{},needsInitialMapExtent:!0,datasetJoinColumn:"",featureJoinColumn:"",triggerScreenshot:0,redraw:0,datasetKeyToFilename:{},datasetJoinSelector:{},showJoiner:!1,showLegend:!1,myDataManager:this.datamanager||new ht(this.root,this.subfolder),config:{},currentUIFilterDefinitions:{},currentUIFillColorDefinitions:{},currentUILineColorDefinitions:{},filterDefinitions:[],isEmbedded:!1,resizer:null,boundaryFilters:new Float32Array(0),boundaryJoinLookups:{},datasetValuesColumn:"",tooltipHtml:"",tooltipIsFixed:!1,tooltipDesiredColumns:[],showTooltipConfigurator:!1,highlightedLinkIndex:-1,bgLayers:{},initialView:null,vizDetails:{title:"",description:"",datasets:{},useSlider:!1,showDifferences:!1,shpFile:"",dbfFile:"",network:"",geojsonFile:"",projection:"",widthFactor:null,sum:!1,filters:[],shapes:"",zoom:null,center:null,pitch:null,bearing:null,mapIsIndependent:!1,display:{fill:{},fillHeight:{},color:{},width:{},lineColor:{},lineWidth:{},radius:{}},tooltip:[],backgroundLayers:{}},datasets:{},loadProgress:0,loadSteps:0,totalLoadSteps:6}},computed:{fileApi(){return new Z(this.fileSystem,L)},fileSystem(){const e=this.$store.state.svnProjects.filter(t=>t.slug===this.root);if(e.length===0)throw console.log("no such project"),Error;return e[0]},configuratorSections(){return this.isAreaMode?["fill-color","fill-height","line-color","line-width","circle-radius","layers","filters"]:["line-color","line-width","layers","filters"]},datasetChoices(){return Object.keys(this.datasets)},generatedExportFilename(){let e=bt(this.yamlConfig??"");return e=e.replaceAll(" ","-"),e.startsWith("viz-map-")||(e="viz-map-"+e),!e.endsWith(".yml")&&!e.endsWith(".yaml")&&(e=e+".yaml"),e}},watch:{},methods:{setDesiredTooltipsNone(){this.tooltipDesiredColumns.forEach(e=>e.enabled=!1)},setDesiredTooltipsAll(){this.tooltipDesiredColumns.forEach(e=>e.enabled=!0)},setupTooltipDesiredColumns(){try{return Object.keys(this.boundaryDataTable).map(t=>({col:t,enabled:!0}))}catch{return[]}},incrementLoadProgress(){this.loadSteps+=1,this.loadProgress=100*this.loadSteps/this.totalLoadSteps},dividerDragStart(e){this.isDraggingDivider=e.clientX,this.dragStartWidth=this.legendSectionWidth},dividerDragEnd(e){this.isDraggingDivider=0},dividerDragging(e){if(!this.isDraggingDivider)return;const t=this.isDraggingDivider-e.clientX;this.legendSectionWidth=Math.max(0,this.dragStartWidth+t)},takeScreenshot(){this.triggerScreenshot++},setEmbeddedMode(){"embed"in this.$route.query&&(console.log("EMBEDDED MODE"),this.isEmbedded=!0,this.$store.commit("setShowLeftBar",!1),this.$store.commit("setFullWidth",!0))},columnsInDataset(e){const t=this.datasets[e];return Object.keys(t)},filterShapesNow(){const e=this.filterDefinitions.filter(i=>i.dataset==="shapes");if(this.boundaryFilters=new Float32Array(this.boundaries.length),!e.length)return;const t=/^(<|>)/;for(const i of e){let s=i.value,a="";if(s=="@categorical")a="@categorical",s="";else if(t.test(s))s.startsWith("<=")?(a="<=",s=parseFloat(s.substring(2).trim())):s.startsWith(">=")?(a=">=",s=parseFloat(s.substring(2).trim())):s.startsWith("<")?(a="<",s=parseFloat(s.substring(1).trim())):s.startsWith(">")&&(a=">",s=parseFloat(s.substring(1).trim()));else if(typeof s=="string")if(s.indexOf(",")>-1)s=s.split(",").map(r=>r.trim()).map(r=>Number.isNaN(parseFloat(r))?r:parseFloat(r));else{const r=parseFloat(s);Number.isNaN(r)||(s=r)}Array.isArray(s)||(s=[s]);const o={conditional:a,invert:i.invert||!1,values:s},n=this.boundaryDataTable[i.column].values;for(let r=0;r<this.boundaries.length;r++)dt(o,n[r])||(this.boundaryFilters[r]=-1)}},truncateFractionalPart(e,t){if(typeof e!="number")return e;let i=""+e;return i.includes(".")&&i.indexOf(".")===i.lastIndexOf(".")&&/\d$/.test(i)?i.substring(0,1+t+i.lastIndexOf(".")):e},async handleClickEvent(e){if(e.index!=-1){let t=e?.object?.feature_idx||-1;this.cbTooltip(t,e,!0),this.tooltipIsFixed=!0,this.highlightedLinkIndex=e.index}else this.tooltipIsFixed=!1,this.highlightedLinkIndex=-1,this.tooltipHtml=""},clearTooltip(){this.wantToClearTooltip&&this.highlightedLinkIndex==-1&&(this.tooltipHtml="")},cbTooltip(e,t,i=!1){if(this.tooltipIsFixed&&!i)return;if(t===null||!this.boundaries[e]?.properties){this.wantToClearTooltip=!0,this.dbClearTooltip();return}this.wantToClearTooltip=!1;const s=4,a=[];if(this.dataNormalizedValues){const u=this.dataCalculatedValueLabel??"Normalized Value";let p=this.truncateFractionalPart(this.dataNormalizedValues[e],s);a.push(`<tr><td style="text-align: right; padding-right: 0.5rem;">${u}</td><td><b>${p}</b></td></tr>`)}if(this.dataCalculatedValues){let u=this.dataCalculatedValueLabel??"Value";const p=this.dataNormalizedValues?u.substring(0,u.lastIndexOf("/")):u;let y=this.truncateFractionalPart(this.dataCalculatedValues[e],s);this.dataCalculatedValueLabel.startsWith("%")&&(y=`${y} %`),a.push(`<tr><td style="text-align: right; padding-right: 0.5rem;">${p}</td><td><b>${y}</b></td></tr>
         <tr><td>&nbsp;</td></tr>`)}let o="";const n=Object.entries(this.boundaries[e].properties);for(const[u,p]of n){if(p===null)continue;let y=this.truncateFractionalPart(p,s);o+=`<tr><td style="text-align: right; padding-right: 0.5rem;">${u}</td><td><b>${y}</b></td></tr>`}o&&a.push(o);let r;this.tooltipDesiredColumns.length?r=this.tooltipDesiredColumns.filter(u=>u.enabled).map(u=>u.col):r=Object.keys(this.boundaryDataTable);const d=new Set(["id","from","to","source","dest","nodeCoordinates","nodeId"]);if(r=r.filter(u=>!d.has(u)),this.vizDetails.tooltip?.length){const u=this.vizDetails.tooltip[0].indexOf(":")>-1?":":".";r=this.vizDetails.tooltip.map(p=>p.substring(p.indexOf(u)+1))}const c=["id","from","to",...r];let l="";if(c.forEach(u=>{if(this.boundaryDataTable[u]){let p=this.boundaryDataTable[u].values[e];if(p==null)return;typeof p=="number"&&(p=this.truncateFractionalPart(p,s)),l+=`<tr><td style="text-align: right; padding-right: 0.5rem;">${u}</td><td><b>${p}</b></td></tr>`}}),l&&a.push(l),!a.length){this.tooltipHtml="";return}const f=`<table>${a.join("")}</table>`;this.tooltipHtml=f},filterShapesNowOriginal(){const e=this.filterDefinitions.filter(t=>t.dataset==="shapes");if(this.boundaryFilters=new Float32Array(this.boundaries.length),!!e.length)for(let t=0;t<this.boundaries.length;t++)for(const i of e)!this.checkIsFiltered(t,i)&&(this.boundaryFilters[t]=-1)},checkIsFiltered(e,t){const s=(t.dataset=="shapes"?this.boundaryDataTable:this.datasets[t.dataset])[t.column].values[e];let a=!1,o=t.value;return typeof o=="string"&&o.indexOf(",")>-1&&(o=o.split(",").map(n=>n.trim()).map(n=>isNaN(parseFloat(n))?n:parseFloat(n))),Array.isArray(o)?a=o.indexOf(s)>-1:a=o==s,t.invert&&(a=!a),a},parseFilterDefinitions(e){if(!e)return[];const t=[];let i;Array.isArray(e)?i=e.map(s=>Object.entries(s)[0]):i=Object.entries(e);for(const s of i){const[a,o]=s,[n,r]=a.split("."),d={dataset:n,value:o,column:r.endsWith("!")?r.substring(0,r.length-1):r,invert:r.endsWith("!")};t.push(d)}return t},honorQueryParameters(){this.$route.query.show=="dots"&&(this.useCircles=!0)},setupQueryFilters(){const e=Object.keys(this.datasets);if(e.length!==2)return;const t=e[1],i=this.datasets[t],s=Object.keys(i),a=Object.keys(this.$route.query).filter(o=>s.indexOf(o)>-1);for(const o of a){this.filters[o]||(console.log("CREATING category filter:",o),this.handleUserCreatedNewFilter(`${t}:${o}`));const n=""+this.$route.query[o];n&&(this.filters[o].active=n.split(",")),this.myDataManager.setFilter({dataset:this.datasetKeyToFilename[t],column:o,value:this.filters[o].active}),this.activateFiltersForDataset(t)}},convertCommasToArray(e){return e===void 0?[]:(Array.isArray(e)||(e.indexOf(",")>-1?e=e.split(",").map(t=>t.trim()):e=[e.trim()]),e)},async getVizDetails(){const e={datasets:{},display:{fill:{}}};if(this.configFromDashboard)this.config=JSON.parse(JSON.stringify(this.configFromDashboard)),this.vizDetails=Object.assign({},e,this.configFromDashboard);else{const i=(this.yamlConfig??"").toLocaleLowerCase();if(i?.endsWith("yaml")||i?.endsWith("yml")){const s=await this.loadYamlConfig();this.config=s,this.vizDetails=Object.assign({},e,s)}if(/(\.xml)(|\.gz)$/.test(i)||/(\.geojson)(|\.gz)$/.test(i)||/\.shp$/.test(i)||/\.gpkg$/.test(i)||/network.*\.avro$/.test(i)||/.gmns.zip$/.test(i)||/.gmns$/.test(i)){let s=this.yamlConfig;i.endsWith("shp")&&(s=`Shapefile: ${this.yamlConfig}`),i.indexOf(".gmns")>-1&&(s=`GMNS Network: ${this.yamlConfig}`),this.vizDetails=Object.assign({},e,this.vizDetails,{title:s,description:this.subfolder,shapes:this.yamlConfig}),this.config=JSON.parse(JSON.stringify(this.vizDetails))}}this.vizDetails.backgroundLayers||(this.vizDetails.backgroundLayers={});const t=this.vizDetails.title||"Map";this.$emit("title",t)},buildOldJoinLookups(){const e={};for(const t of Object.keys(this.vizDetails.datasets||[])){const i=this.vizDetails.datasets[t].join;if(!i)continue;const s=i.indexOf(":");if(e[t]=i.substring(s+1),typeof this.vizDetails.shapes=="string"){const a=s>-1?i.substring(0,s):i;this.vizDetails.shapes={file:this.vizDetails.shapes,join:a}}}for(const t of Object.keys(this.vizDetails.display||[])){const s=this.vizDetails.display[t];(s.dataset||s.diff)&&!s.join&&(s.join=e[s.dataset])}},getFileSystem(e){const t=this.$store.state.svnProjects.filter(i=>i.slug===e);if(t.length===0)throw console.log("no such project"),Error;return t[0]},async loadYamlConfig(){const e=this.yamlConfig??"",t=e.indexOf("/")>-1?e:this.subfolder+"/"+e;try{const s=await this.fileApi.getFileText(t);return j.parse(s)}catch(s){const a=""+s;a.startsWith("YAMLSemantic")&&this.$emit("error",`${t}: ${a}`),console.log(`${t} not found, trying config folders`)}const{vizes:i}=await this.fileApi.findAllYamlConfigs(this.subfolder);if(i[e])try{const s=await this.fileApi.getFileText(i[e]);return j.parse(s)}catch{console.error(`Also failed to load ${i[e]}`)}this.$emit("error","Could not load YAML: "+t)},changeConfiguration(e){try{e.fill&&(this.vizDetails.display.fill=e.fill,this.handleNewFillColor(e.fill)),e.fillHeight&&(this.vizDetails.display.fillHeight=e.fillHeight,this.handleNewFillHeight(e.fillHeight)),e.lineColor&&(this.vizDetails.display.lineColor=e.lineColor,this.handleNewLineColor(e.lineColor)),e.lineWidth&&(this.vizDetails.display.lineWidth=e.lineWidth,this.handleNewLineWidth(e.lineWidth),this.currentUILineColorDefinitions&&this.handleNewLineColor(this.currentUILineColorDefinitions)),e.radius&&(this.vizDetails.display.radius=e.radius,this.handleNewRadius(e.radius)),e.dataset&&this.handleNewDataset(e.dataset),e.layers&&this.handleNewLayers(e.layers),e.filters&&this.handleNewFilters(e.filters)}catch(t){this.$emit("error",""+t)}},handleNewLayers(e){const t={};for(const i of e){const{title:s,...a}=i;t[s]=a}this.vizDetails.backgroundLayers=t;try{this.loadBackgroundLayers(),this.bgLayers={...this.bgLayers}}catch(i){console.error("Error handling layers, check filenames and parameters: "+i)}},generateUniqueDatasetKeyFromFilename(e){if(!(e in this.vizDetails.datasets))return e;console.log(e,"not unique");for(let t=2;t<100;t++){let i=`${e}_${t}`;if(!(i in this.vizDetails.datasets))return i}return`${e}__${Math.floor(100+1e5*Math.random())}`},async handleNewDataset(e){let{key:t,dataTable:i,filename:s}=e;const o=this.generateUniqueDatasetKeyFromFilename(t),n=s||o;if(console.log("HANDLE NEW DATASET:",o,n),this.featureJoinColumn||(this.featureJoinColumn=await this.figureOutFeatureIdColumn()),console.log("---featureIDColumn",this.featureJoinColumn),!this.boundaryDataTable[this.featureJoinColumn])throw Error(`Geodata does not have property ${this.featureJoinColumn}`);this.myDataManager.setPreloadedDataset({key:this.datasetKeyToFilename[o],dataTable:i}),this.myDataManager.addFilterListener({dataset:this.datasetKeyToFilename[o],subfolder:this.subfolder},this.processFiltersNow),this.vizDetails.datasets[o]={file:n},this.vizDetails=Object.assign({},this.vizDetails),this.datasets[o]=i,this.datasets=Object.assign({},this.datasets)},setupJoin(e){const{dataTable:t,datasetId:i,dataJoinColumn:s}=e;if(!s||`@@${s}`in t)return;if(!this.boundaryDataTable[this.featureJoinColumn])throw Error(`Geodata does not have property ${this.featureJoinColumn}`);if(!t[s])throw Error(`Dataset ${i} does not have column ${s}`);const a={type:D.LOOKUP,values:[],name:`@@${s}`},o=t[s].values,n=this.getBoundaryOffsetLookup(this.featureJoinColumn);for(let r=0;r<o.length;r++){const d=n[o[r]];a.values[r]=d}t[`@@${s}`]=a,this.myDataManager.setPreloadedDataset({key:this.datasetKeyToFilename[i],dataTable:t}),this.vizDetails.datasets[i]={file:this.datasetKeyToFilename[i],join:this.featureJoinColumn===s?this.featureJoinColumn:`${this.featureJoinColumn}:${s}`},this.myDataManager.addFilterListener({dataset:this.datasetKeyToFilename[i],subfolder:this.subfolder},this.processFiltersNow),this.prepareTooltipData(e),this.datasets[i]=t},prepareTooltipData(e){const{dataTable:t,datasetId:i,dataJoinColumn:s}=e;let a=":";const o=this.vizDetails.tooltip||[];if(o.length&&(a=o[0].indexOf(":")>-1?":":"."),!o.length){const c=Object.values(this.vizDetails.display);for(const l of c)l.columnName&&l.dataset===i&&o.push(`${i}${a}${l.columnName}`)}const n=o.filter(c=>c.substring(0,c.indexOf(a)).startsWith(i)).map(c=>({id:c,column:c.substring(1+c.indexOf(a))}));if(!n.length)return;const r=t[s].values,d=this.getBoundaryOffsetLookup(this.featureJoinColumn);for(const c of n){if(!t[c.column]){this.$emit("error",`Tooltip references "${c.id}" but that column doesn't exist`);continue}for(let l=0;l<r.length;l++){const h=d[r[l]],f=this.boundaries[h],u=t[c.column].values[l];f&&(f.properties[c.id]=u)}}},getBoundaryOffsetLookup(e){if(this.boundaryJoinLookups[e])return this.boundaryJoinLookups[e];try{this.statusText="Joining datasets...",this.boundaryJoinLookups[e]={};const t=this.boundaryJoinLookups[e],i=this.boundaryDataTable[e].values;for(let s=0;s<this.boundaries.length;s++)t[i[s]]=s;return this.statusText="",t}catch{return console.warn("waahaa"),{}}},removeAnyOldFilters(e){const t=new Set(Object.keys(this.currentUIFilterDefinitions).filter(s=>!s.startsWith("shapes.")));new Set(Object.keys(e).filter(s=>!s.startsWith("shapes."))).forEach(s=>t.delete(s));for(const s of t){console.log("REMOVING",s);const a=s.indexOf("."),o=s.slice(0,a),n=s.slice(a+1);if(this.myDataManager.setFilter({dataset:this.datasetKeyToFilename[o],column:n,value:[]}),n in this.filters){const r=Object.assign({},this.$route.query);delete r[n],this.$router.replace({query:r}),delete this.filters[n]}}},async handleNewFilters(e){this.removeAnyOldFilters(e),this.currentUIFilterDefinitions=e;const t=this.parseFilterDefinitions(e);this.filterDefinitions=t,this.filterShapesNow(),Object.keys(this.datasets).forEach(async(i,s)=>{s!==0&&(await this.activateFiltersForDataset(i),this.processFiltersNow(i))})},handleColorDiffMode(e,t){if(!t.diffDatasets)return;const i=t.columnName,s=t.join||"",a=t.diffDatasets[0]||"",o=this.datasets[a],n=t.diffDatasets[1]||"",r=this.datasets[n],d=!!t.relative;if(o&&r){this.setupJoin({datasetId:a,dataTable:o,dataJoinColumn:s}),this.setupJoin({datasetId:n,dataTable:r,dataJoinColumn:s});const c=o[`@@${s}`],l=r[`@@${s}`],h=o[i],f=r[i];if(!h)throw Error(`Dataset ${a} does not contain column "${i}"`);if(!f)throw Error(`Dataset ${n} does not contain column "${i}"`);let u,p;if(t.normalize){const[m,b]=t.normalize.split(":");if(!this.datasets[m]||!this.datasets[m][b])throw Error(`${m} does not contain column "${b}"`);this.dataCalculatedValueLabel+=`/ ${b}`,u=this.datasets[m][b],this.datasetChoices[0]!==m&&(this.setupJoin({datasetId:m,dataTable:this.datasets[m],dataJoinColumn:s}),p=this.datasets[m][`@@${s}`])}const y={ramp:t.colorRamp?.ramp||"Viridis",style:t.colorRamp?.style||0,reverse:t.colorRamp?.reverse||!1,steps:t.colorRamp?.steps||9,breakpoints:t.colorRamp?.breakpoints},{rgbArray:v,legend:g,calculatedValues:C}=w.getColorsForDataColumn({numFeatures:this.boundaries.length,data:h,data2:f,lookup:c,lookup2:l,normalColumn:u,normalLookup:p,options:{colorRamp:y,fixedColors:t.fixedColors},filter:this.boundaryFilters,relative:d});if(!v)return;e==="fill"?this.dataFillColors=v:this.dataLineColors=v,this.dataCalculatedValues=C,this.dataCalculatedValueLabel=`${d?"% ":""}Diff: ${i}`,this.showLegend=!0,this.legendStore.setLegendSection({section:e==="fill"?"FillColor":"Line Color",column:h.name,values:g,diff:!0,relative:d,normalColumn:u?u.name:""})}},paintColorsWithFilter(e,t){const i=e==="fill"?this.currentUIFillColorDefinitions:this.currentUILineColorDefinitions,s=i.columnName,a=i.join==="@count"?t[`@@${s}`]:t[`@@${i.join}`];let o;if(i.normalize){const l=i.normalize.split(":");this.dataCalculatedValueLabel=s+"/"+l[1];const h=i.dataset;if(!this.datasets[l[0]]||!this.datasets[l[0]][l[1]])throw Error(`Dataset ${h} does not contain column "${s}"`);o=t[l[1]]}const n={numFeatures:this.boundaries.length,data:t[s],lookup:a,normalColumn:o,filter:this.boundaryFilters,options:i,join:i.join},{rgbArray:r,legend:d,calculatedValues:c}=w.getColorsForDataColumn(n);r&&(e==="fill"?this.dataFillColors=r:this.dataLineColors=r,this.dataCalculatedValues=c,this.showLegend=!0,this.legendStore.setLegendSection({section:e==="fill"?"FillColor":"Line Color",column:s,values:d}))},handleNewFillColor(e){const t="columnName"in e,i=!t;if(t){const m=e?.dataset,{filteredRows:b}=this.myDataManager.getFilteredDataset({dataset:`${m}`||""});if(b&&b.length){this.currentUIFillColorDefinitions=e,this.processFiltersNow(m);return}}if(i){this.paintColorsWithFilter("fill",e);return}const s=e;this.currentUIFillColorDefinitions=s;const a=s.columnName;if(s.diffDatasets){this.handleColorDiffMode("fill",s);return}if(!a){this.dataFillColors=s.fixedColors[0],this.dataCalculatedValueLabel="",this.legendStore.clear("FillColor");return}const o=s.dataset||"",n=this.datasets[o];if(this.dataCalculatedValueLabel="",!n){console.warn("color: no selected dataset yet, maybe still loading");return}const r=n[a];if(!r)throw Error(`Dataset ${o} does not contain column "${a}"`);this.dataCalculatedValueLabel=a??"",this.$emit("error","");let d="";if(s.join&&s.join!=="@count")d=s.join;else if(s.join==="@count")d=a;else if(this.datasetChoices.length>1){const m=this.datasetChoices[0];o!==m&&(console.warn("No join; lets hope user just wants to display data in boundary file"),this.$emit("error",`Specify the "Join by" column to link ${o} dataset values correctly!`))}this.setupJoin({datasetId:o,dataTable:n,dataJoinColumn:d});const c=n[`@@${d}`];let l,h;if(s.normalize){const[m,b]=s.normalize.split(":");if(!this.datasets[m]||!this.datasets[m][b])throw Error(`${m} does not contain column "${b}"`);this.dataCalculatedValueLabel+=`/ ${b}`,l=this.datasets[m][b],this.datasetChoices[0]!==m&&this.setupJoin({datasetId:m,dataTable:this.datasets[m],dataJoinColumn:d}),h=this.datasets[m][`@@${d}`]}const f={ramp:s.colorRamp?.ramp||"Viridis",style:s.colorRamp?.style||0,reverse:s.colorRamp?.reverse||!1,steps:s.colorRamp?.steps||9,breakpoints:s.colorRamp?.breakpoints||void 0};let u;if(s.transparency){const[m,b]=s.transparency.split("/");if(u=this.datasets[m][b],!u)throw Error(`Dataset ${m} does not contain column "${b}"`)}const p=w.getColorsForDataColumn({numFeatures:this.boundaries.length,data:r,transparency:u,normalColumn:l,normalLookup:h,lookup:c,filter:this.boundaryFilters,options:{colorRamp:f,fixedColors:s.fixedColors},join:s.join}),{rgbArray:y,legend:v,calculatedValues:g}=p,C=p.isRGBA||!1;y&&(this.dataFillColors=y,this.dataCalculatedValues=g,this.dataNormalizedValues=g||null,this.isRGBA=C,this.showLegend=!0,this.legendStore.setLegendSection({section:"FillColor",column:r.name,values:v,normalColumn:l?l.name:""}))},handleNewLineColor(e){if(e===!1){this.dataLineColors="",this.legendStore.clear("Line Color");return}const t="columnName"in e,i=!t;if(t){const o=e?.dataset;if(o){const{filteredRows:n}=this.myDataManager.getFilteredDataset({dataset:`${o}`||""});if(n&&n.length){this.currentUILineColorDefinitions=e,this.processFiltersNow(o);return}}}const s=e;if(i&&s.columnName!=="@0"){this.paintColorsWithFilter("lineColor",e);return}this.currentUILineColorDefinitions=s;const a=s.columnName;if(s.diffDatasets){this.handleColorDiffMode("lineColor",s);return}else if(a==="@0"){this.dataLineColors=this.isAreaMode?"":"#4E7AA7",this.dataCalculatedValueLabel="",this.legendStore.clear("Line Color");return}else if(a){const o=s.dataset||"",n=this.datasets[o];if(this.dataCalculatedValueLabel="",!n){console.warn("color: no selected dataset yet, maybe still loading");return}const r=n[a];if(!r)throw Error(`Dataset ${o} does not contain column "${a}"`);this.dataCalculatedValueLabel=a??"",this.$emit("error","");let d="";if(s.join&&s.join!=="@count")d=s.join;else if(s.join==="@count")d=a;else if(this.datasetChoices.length>1){const g=this.datasetChoices[0];o!==g&&(console.warn("No join; lets hope user just wants to display data in boundary file"),this.$emit("error",`Specify the "Join by" column to link ${o} dataset values correctly!`))}this.setupJoin({datasetId:o,dataTable:n,dataJoinColumn:d});const c=n[`@@${d}`];let l,h;if(s.normalize){const[g,C]=s.normalize.split(":");if(!this.datasets[g]||!this.datasets[g][C])throw Error(`${g} does not contain column "${C}"`);this.dataCalculatedValueLabel+=`/ ${C}`,l=this.datasets[g][C],this.datasetChoices[0]!==g&&(this.setupJoin({datasetId:g,dataTable:this.datasets[g],dataJoinColumn:d}),h=this.datasets[g][`@@${d}`])}const f={ramp:s.colorRamp?.ramp||"Viridis",style:s.colorRamp?.style||0,reverse:s.colorRamp?.reverse||!1,steps:s.colorRamp?.steps||9,breakpoints:s.colorRamp?.breakpoints},u=w.getColorsForDataColumn({numFeatures:this.boundaries.length,data:r,lookup:c,normalColumn:l,normalLookup:h,filter:this.boundaryFilters,options:{colorRamp:f,fixedColors:s.fixedColors},join:s.join}),{rgbArray:p,legend:y,calculatedValues:v}=u;if(!p)return;if(this.dataLineColors=p,this.dataCalculatedValues=v,this.dataNormalizedValues=v||null,u.hasCategory&&this.constantLineWidth!==null){const g=this.constantLineWidth,C=new Float32Array(this.boundaries.length).fill(1);Object.keys(u.hasCategory).forEach(m=>{C[m]=g}),this.dataLineWidths=C}this.showLegend=!0,this.legendStore.setLegendSection({section:"Line Color",column:r.name,values:y,normalColumn:l?l.name:""}),this.showLegend=!0}else{this.dataLineColors=s.fixedColors[0],this.dataCalculatedValueLabel="",this.legendStore.clear("Line Color");return}},handleNewLineWidth(e){const t=e.columnName||"";if(e.dataset&&/^@\d$/.test(e.dataset)){this.dataLineWidths=Number.parseInt(e.dataset.substring(1)),this.constantLineWidth=this.dataLineWidths,this.legendStore.clear("Line Width");return}else this.constantLineWidth=null;if(e.scaleFactor&&isNaN(e.scaleFactor)){this.dataLineWidths=1,this.legendStore.clear("Line Width");return}if(e.diffDatasets){const i=e.join||"",s=e.diffDatasets[0]||"",a=this.datasets[s],o=e.diffDatasets[1]||"",n=this.datasets[o];if(a&&n){this.setupJoin({datasetId:s,dataTable:a,dataJoinColumn:i}),this.setupJoin({datasetId:o,dataTable:n,dataJoinColumn:i});const r=a[`@@${i}`],d=n[`@@${i}`],c=a[t],l=n[t];if(!c)throw Error(`Dataset ${s} does not contain column "${t}"`);if(!l)throw Error(`Dataset ${o} does not contain column "${t}"`);const{array:h,legend:f,calculatedValues:u}=w.getWidthsForDataColumn({numFeatures:this.boundaries.length,data:c,data2:l,lookup:r,lookup2:d,options:e});this.dataLineWidths=h||0,this.dataCalculatedValues=u,this.dataCalculatedValueLabel="Diff: "+t,this.showLegend=!0,this.legendStore.setLegendSection({section:"Line Width",column:`${c.name} (Diff)`,values:f})}}else if(t){const i=e.dataset||"",s=this.datasets[i];if(s){const a=s[t];if(!a)throw Error(`Dataset ${i} does not contain column "${t}"`);this.$emit("error","");let o="";if(e.join&&e.join!=="@count")o=e.join;else if(e.join==="@count")o=t;else if(this.datasetChoices.length>1){const l=this.datasetChoices[0];i!==l&&(console.warn("No join; lets hope user just wants to display data in boundary file"),this.$emit("error",`Specify the "Join by" column to link ${i} dataset values correctly!`))}this.setupJoin({datasetId:i,dataTable:s,dataJoinColumn:o});const n=s[`@@${o}`],{array:r,legend:d,calculatedValues:c}=w.getWidthsForDataColumn({numFeatures:this.boundaries.length,data:a,lookup:n,join:e.join,options:e});this.dataLineWidths=r||0,this.dataCalculatedValues=c,this.dataCalculatedValueLabel=t,d.length?(this.showLegend=!0,this.legendStore.setLegendSection({section:"Line Width",column:a.name,values:d})):this.legendStore.clear("Line Width")}}else this.dataLineWidths=1,this.dataCalculatedValueLabel="",this.legendStore.clear("Line Width")},handleNewFillHeight(e){const t=e.columnName;if(t){const i=e.dataset||"",s=this.datasets[i];if(s){const a=s[t];if(!a)throw Error(`Dataset ${i} does not contain column "${t}"`);this.$emit("error","");let o="";if(e.join&&e.join!=="@count")o=e.join;else if(e.join==="@count")o=t;else if(this.datasetChoices.length>1){const h=this.datasetChoices[0];i!==h&&(console.warn("No join; lets hope user just wants to display data in boundary file"),this.$emit("error",`Specify the "Join by" column to link ${i} dataset values correctly!`))}this.setupJoin({datasetId:i,dataTable:s,dataJoinColumn:o});const n=s[`@@${o}`];let r;if(e.normalize){const h=e.normalize.split(":");if(!this.datasets[h[0]]||!this.datasets[h[0]][h[1]])throw Error(`Dataset ${i} does not contain column "${t}"`);r=this.datasets[h[0]][h[1]],this.dataCalculatedValueLabel=t+"/"+h[1]}const{heights:d,calculatedValues:c,normalizedValues:l}=w.getHeightsBasedOnNumericValues({length:this.boundaries.length,data:a,lookup:n,options:e,normalize:r,join:e.join});if(this.dataFillHeights=d,this.dataCalculatedValues=c,this.dataNormalizedValues=l||null,this.$store.state.viewState.pitch==0){const h=Object.assign({},this.$store.state.viewState,{pitch:30});this.$store.commit("setMapCamera",h)}}}else this.dataFillHeights=0,this.dataCalculatedValues=null,this.dataCalculatedValueLabel=""},handleNewRadius(e){const t=e.columnName;if(t){const i=e.dataset||"",s=this.datasets[i];if(!s)return;if(s){const a=s[t];if(!a)throw Error(`Dataset ${i} does not contain column "${t}"`);let o="";e.join&&e.join!=="@count"?o=e.join:e.join==="@count"?o=t:this.datasetChoices.length>1&&console.warn("No join; lets hope user just wants to display data in boundary file"),this.setupJoin({datasetId:i,dataTable:s,dataJoinColumn:o});const n=s[`@@${o}`],{radius:r,calculatedValues:d}=w.getRadiusForDataColumn({length:this.boundaries.length,data:a,lookup:n,join:o,options:e});this.dataPointRadii=r,this.dataCalculatedValues=d,this.dataCalculatedValueLabel=a.name}}else this.dataPointRadii=5},async handleMapClick(e){try{const{x:t,y:i,data:s}=e.points[0],a=this.config.groupBy,o=t}catch(t){console.error(t)}},async figureOutFeatureIdColumn(){if(this.featureJoinColumn)return this.featureJoinColumn;if(typeof this.vizDetails.shapes!="string"&&this.vizDetails.shapes.join)return this.isAvroFile&&this.vizDetails.shapes.join==="id"?"linkId":this.vizDetails.shapes.join;if(this.boundaries.length&&this.boundaries[0].id)return"id";if(typeof this.vizDetails.shapes!="string"&&this.vizDetails.shapes.join)return this.vizDetails.shapes.join;const e=this.datasets[Object.keys(this.datasets)[0]],t=Object.keys(e);if(t.length===1)return t[0];const i=await new Promise((s,a)=>{const o=new Set;this.boundaries[0].id&&o.add("id"),Object.keys(e).forEach(n=>o.add(n)),this.datasetJoinSelector={data1:{title:"Properties",columns:Array.from(o)}},this.showJoiner=!0,this.cbDatasetJoined=n=>{this.datasetJoinSelector={},this.showJoiner=!1,s(n)}});return i.length?i:"id"},async processFiltersNow(e){const{filteredRows:t}=this.myDataManager.getFilteredDataset({dataset:e||""}),i={};if(t){(t.length>0?Object.keys(t[0]):[]).forEach(n=>{const r={name:n,values:[],type:D.UNKNOWN};for(const d of t)r.values.push(d[n]);i[n]=r});const a=this.getBoundaryOffsetLookup(this.featureJoinColumn),o=new Float32Array(this.boundaryFilters.length);o.fill(1);for(const n of t){const r=n[this.featureJoinColumn],d=a[r];o[d]=0}for(let n=0;n<this.boundaryFilters.length;n++)o[n]&&(this.boundaryFilters[n]=-1)}try{this.currentUIFillColorDefinitions?.dataset&&this.handleNewFillColor(t?i:this.currentUIFillColorDefinitions),this.currentUILineColorDefinitions?.dataset&&this.handleNewLineColor(t?i:this.currentUILineColorDefinitions)}catch(s){this.$emit("error",""+s)}},async loadGMNSFeatures(e){const t=`${this.subfolder}/${e}`,i=await this.fileApi.getFileBlob(t),s=await z.load(t,i);return z.toGeojson(s).features},async loadAvroNetwork(e){const t=await this.myDataManager.getRoadNetwork(e,this.subfolder,this.vizDetails,null,!0),i=t.linkId.length,s=[];for(let a=0;a<i;a++){const o=t.linkId[a],n=[t.source.slice(a*2,a*2+2),t.dest.slice(a*2,a*2+2)],r={id:o,type:"Feature",properties:{},geometry:{type:"LineString",coordinates:n}};s.push(r)}return this.avroNetwork=t,this.isAvroFile=!0,s},updateStatus(e){this.statusText=e,this.incrementLoadProgress()},async loadXMLNetwork(e){if(!this.myDataManager)throw Error("no datamanager");this.statusText="Loading XML network...";const t=[];try{const i=await this.myDataManager.getRoadNetwork(e,this.subfolder,this.vizDetails,this.updateStatus),s=i.linkId.length,a=i.crs||"EPSG:4326",o=a!=="EPSG:4326"&&a!=="WGS84";this.isAtlantis=!!i.isAtlantis;for(let n=0;n<s;n++){const r=i.linkId[n],d=2*i.from[n],c=2*i.to[n];let l=[i.nodeCoordinates[d],i.nodeCoordinates[1+d]],h=[i.nodeCoordinates[c],i.nodeCoordinates[1+c]];o&&(l=k.toLngLat(a,l),h=k.toLngLat(a,h));const u={id:r,type:"Feature",properties:{},geometry:{type:"LineString",coordinates:[l,h]}};t.push(u)}this.avroNetwork=i,this.isAvroFile=!0}catch(i){this.$emit("error",""+i)}finally{return t}},async loadGeoPackage(e){this.statusText="Loading geopackage...",console.log("loading",e);const t=`${this.subfolder}/${e}`,s=await(await this.fileApi.getFileBlob(t)).arrayBuffer();return G.loadGeoPackageFromBuffer(s)},async loadBoundaries(){const e=this.config.boundaries||this.config.shapes||this.config.geojson||this.config.network;if(!e)return;let t=e.file||e,i=[],s;try{this.statusText="Loading features...",this.incrementLoadProgress(),t.toLocaleLowerCase().endsWith("gpkg")?(console.log("--GPKG"),s=await this.loadGeoPackage(t)):t.startsWith("http")?(console.log("--HTTP to JSON file"),s=(await fetch(t).then(async r=>await r.json())).features):t.toLocaleLowerCase().endsWith(".shp")?(console.log("--SHP"),s=await this.loadShapefileFeatures(t)):t.toLocaleLowerCase().indexOf(".gmns")>-1?(console.log("--GMNS"),s=await this.loadGMNSFeatures(t)):t.toLocaleLowerCase().indexOf(".xml")>-1?(console.log("--MATSIM XML"),s=await this.loadXMLNetwork(t)):/network.*\.avro$/.test(t.toLocaleLowerCase())?(console.log("--AVRO"),s=await this.loadAvroNetwork(t)):(console.log("--GEOJSON"),s=(await this.fileApi.getFileJson(`${this.subfolder}/${t}`)).features),await this.$nextTick(),this.statusText="Processing data...",this.incrementLoadProgress(),await this.$nextTick(),await this.$nextTick();let a=!0,o=!0,n=!1;s.forEach(r=>{const d=r.properties??{};"id"in r&&(d.id=r.id),i.push({...d}),r.properties={},(r.geometry.type=="Point"||r.geometry.type=="MultiPoint")&&(n=!0),a&&(r.geometry.type=="LineString"||r.geometry.type=="MultiLineString")&&(a=!1),o&&(r.geometry.type=="Polygon"||r.geometry.type=="MultiPolygon")&&(o=!1)}),await this.setFeaturePropertiesAsDataSource(t,[...i],e),this.incrementLoadProgress(),(n||!o)&&(this.isAreaMode=!0),this.statusText="Adding boundaries to map",await this.$nextTick(),this.incrementLoadProgress(),this.boundaries=s,this.incrementLoadProgress()}catch(a){const r=`${a.statusText||"Could not load"}: "${t}"`;throw this.statusText="",this.$emit("isLoaded"),Error(r)}if(!this.boundaries||this.boundaries.length===0)throw Error('No "features" found in shapes file')},async setFeaturePropertiesAsDataSource(e,t,i){let s;if(this.avroNetwork){const o={},n=[...this.avroNetwork.linkAttributes,"from","to"];n.sort();for(const r of n){const d=this.avroNetwork[r],c=Number.isFinite(d[0])||Number.isNaN(d[0])?D.NUMBER:D.STRING,l={name:r,values:d,type:c};o[r]=l}if(this.avroNetwork.allowedModes){const r=this.avroNetwork.modes,d=o.allowedModes;d.type=D.STRING,d.values=d.values.map(c=>r[c]),o.modes=d,delete o.allowedModes}s=await this.myDataManager.setRowWisePropertyTable(e,o,i),"linkId"in s&&!("id"in s)&&(s={id:s.linkId,...s},s.id.name="id"),this.avroNetwork=null}else s=await this.myDataManager.setFeatureProperties(e,t,i);this.boundaryDataTable=s;const a=e.substring(1+e.lastIndexOf("/"));this.datasets[a]=s,this.vizDetails.datasets[a]={file:a,join:this.datasetJoinColumn},this.config.datasets=Object.assign({},this.vizDetails.datasets),(!this.vizDetails.tooltip||!this.vizDetails.tooltip.length)&&(this.tooltipDesiredColumns=this.setupTooltipDesiredColumns())},async calculateAndMoveToCenter(){let e=0,t=0,i=0;const s=this.boundaries.length;for(let n=0;n<s;n+=256)try{const r=F(this.boundaries[n]);r?.geometry?.coordinates&&(e+=r.geometry.coordinates[0],t+=r.geometry.coordinates[1],i+=1)}catch{}e/=i,t/=i;let a=9;console.log("--- CALCULATED CENTER",e,t),(e==null||t==null)&&(e=30,t=30,a=5);const o={center:[e,t],bearing:0,pitch:0,zoom:a};this.initialView=o,this.vizDetails.mapIsIndependent||this.$store.commit("setMapCamera",o)},async generateCentroidsAndMapCenter(){this.statusText="Calculating centroids...",await this.$nextTick();const e=this.config?.shapes?.join||"id";let t=0,i=0,s=0;for(const a of this.boundaries){let o={};try{o=F(a)}catch{console.warn("no coordinates:"),console.warn(a);continue}o.properties||(o.properties={}),a.properties[this.config.boundariesLabel]&&(o.properties.label=a.properties[this.config.boundariesLabel]),o.properties.id=a.properties[e],o.properties.id===void 0&&(o.properties.id=a[e]),this.centroids.push(o),o.geometry&&(t+=o.geometry.coordinates[0],i+=o.geometry.coordinates[1],s++)}t/=s,i/=s,console.log("CENTER",t,i),this.needsInitialMapExtent&&!this.vizDetails.center&&(this.$store.commit("setMapCamera",{center:[t,i],bearing:0,pitch:0,zoom:9,initial:!0}),this.needsInitialMapExtent=!1)},async loadShapefileFeatures(e){this.statusText="Loading shapefile...",console.log("loading",e);const t=`${this.subfolder}/${e}`;let i,s,a,o={};try{i=await this.fileApi.getFileBlob(t)}catch{return this.$emit("error","Error loading "+t),[]}try{let h=t;h.endsWith(".shp")&&(h=h.slice(0,-4)+".dbf"),h.endsWith(".SHP")&&(h=h.slice(0,-4)+".DBF"),h.endsWith(".Shp")&&(h=h.slice(0,-4)+".Dbf"),s=await this.fileApi.getFileBlob(h),a=await(await s)?.arrayBuffer()}catch{}try{const h=await(await i)?.arrayBuffer();if(!h)return[];this.statusText="Generating shapes...",o=await H(h,a),o.features=o.features.filter(f=>!!f.geometry),this.statusText=""}catch(h){return console.error(h),this.$emit("error",`Error loading shapefile ${t}`),[]}let n=B,r=t;r.endsWith(".shp")&&(r=r.slice(0,-4)+".prj"),r.endsWith(".SHP")&&(r=r.slice(0,-4)+".PRJ"),r.endsWith(".Shp")&&(r=r.slice(0,-4)+".Prj");try{n=await this.fileApi.getFileText(r)}catch(h){console.error(""+h)}const d=this.vizDetails.projection||k.guessProjection(n);d&&(this.statusText="Projecting coordinates...",await this.$nextTick(),o=q.toWgs84(o,d,k.allEPSGs),this.statusText="");function c(h){return Array.isArray(h[0])?c(h[0]):[h[0],h[1]]}const l=c(o.features[0].geometry.coordinates);return Math.abs(l[0])>180||Math.abs(l[1])>90?(this.$emit("error","Coordinates not lon/lat. Try adding projection to YAML, or provide a .prj file"),this.statusText="",[]):o.features},async loadDatasets(){const e=Object.keys(this.vizDetails.datasets);e.length>1&&(this.featureJoinColumn=await this.figureOutFeatureIdColumn());for(const t of e)t in this.datasets||await this.loadDataset(t)},async loadDataset(e){try{if(!e)return;const t=typeof this.config.datasets[e]=="string"?this.config.datasets[e]:this.config.datasets[e].file;this.statusText=`Loading dataset ${t} ...`,await this.$nextTick();let i={dataset:t};typeof this.config.datasets[e]!="string"&&(i=Object.assign(i,this.config.datasets[e])),this.datasetKeyToFilename[e]=t;const s=await this.myDataManager.getDataset(i,{subfolder:this.subfolder}),a=Object.keys(s.allRows)[0],n=(typeof this.config.datasets[e]=="string"?a:this.config.datasets[e].join||a)?.split(":")||[];n.length==2&&(this.featureJoinColumn=n[0]),n.length==1&&n.push(n[0]),this.datasets[e]=s.allRows,await this.$nextTick(),this.myDataManager.addFilterListener({dataset:t,subfolder:this.subfolder},this.processFiltersNow),this.activateFiltersForDataset(e)}catch(t){const i=""+t;console.error(i),this.$emit("error",i)}return[]},async activateFiltersForDataset(e){const t=this.filterDefinitions.filter(i=>i.dataset===e);for(const i of t)if(i.value=="@categorical")this.filters[i.column]?i.value=this.filters[i.column].active:this.handleUserCreatedNewFilter(`${e}:${i.column}`);else try{await this.myDataManager.setFilter(Object.assign(i,{dataset:this.datasetKeyToFilename[e]}))}catch(s){this.$emit("error",`Filter ${e}.${i.column}: `+s)}},filterLabel(e){let t=this.filters[e].active.join(",").substring(0,50)||"Select...";return t.length===50&&(t+="..."),t},async handleUserSelectedNewMetric(){await this.$nextTick(),console.log("METRIC",this.datasetValuesColumn);const e=Object.assign({},this.$route.query);e.display=this.datasetValuesColumn,this.$router.replace({query:e}),this.maxValue=this.boundaryDataTable[this.datasetValuesColumn].max||0,this.vizDetails.display.fill.columnName=this.datasetValuesColumn,this.vizDetails=Object.assign({},this.vizDetails),this.processFiltersNow()},handleUserSelectedNewFilters(e){const t=this.filters[e],i=t.active;this.myDataManager.setFilter({dataset:this.datasetKeyToFilename[t.dataset],column:e,invert:!1,value:i});const s=Object.assign({},this.$route.query);for(const a of Object.entries(this.filters))a[1].active.length?s[a[0]]=a[1].active.join(","):delete s[a[0]];JSON.stringify(this.$route.query)!==JSON.stringify(s)&&this.$router.replace({query:s})},showCircles(e){this.useCircles=e;const t=Object.assign({},this.$route.query);e?t.show="dots":delete t.show,this.$router.replace({query:t})},handleUserCreatedNewFilter(e){const t=e||this.chosenNewFilterColumn,[i,s]=t.split(":");let a=[...new Set(this.datasets[i][s].values)];if(this.chosenNewFilterColumn="",a.length>48){alert(`Column ${s} has too many values to be used as a filter.`);return}this.filters[s]={column:s,label:s,options:a,active:[],dataset:i}},clearData(){this.boundaries=[],this.centroids=[],this.boundaryDataTable={},this.boundaryFilters=new Float32Array(0),this.datasets={},this.dataFillColors="#888",this.dataLineColors="",this.dataLineWidths=1,this.dataPointRadii=5,this.dataFillHeights=0,this.dataCalculatedValues=null,this.dataCalculatedValueLabel="",this.bgLayers={},this.cbDatasetJoined=null,this.dataNormalizedValues=null,this.resizer=null,this.myDataManager.clearCache()},updateBgLayers(){this.bgLayers={...this.bgLayers}},async loadBackgroundLayers(){if(this.bgLayers={},!this.vizDetails.backgroundLayers){this.vizDetails.backgroundLayers={};return}for(const e of Object.keys(this.vizDetails.backgroundLayers))try{console.log("LOADING",e);const t=this.vizDetails.backgroundLayers[e];if(!t.shapes)continue;let i=[];try{const l=t.shapes;l.startsWith("http")?i=(await fetch(l).then(async h=>await h.json())).features:l.toLocaleLowerCase().endsWith(".gpkg")?i=await this.loadGeoPackage(l):l.toLocaleLowerCase().endsWith(".shp")?i=await this.loadShapefileFeatures(l):i=(await this.fileApi.getFileJson(`${this.subfolder}/${l}`)).features}catch(l){console.error(""+l)}let s=null;if(t.fill&&!t.fill.startsWith("#")){const l=t.fill.startsWith("scheme")?t.fill:`interpolate${t.fill}`,h=X[l];if(h){const f=ut(h);s=Array.from({length:i.length},(u,p)=>{const y=N(f(p/i.length-1));return[y.r,y.g,y.b]})}}for(let l=0;l<i.length;l++){const h=i[l];let f=[64,64,192];t.fill&&(t.fill.startsWith("#")?f=I([t.fill])[0]:s&&(f=s[l])),h.properties.__fill__=f}if(t.label){const l=[];for(const h of i){const f=F(h);f.properties||(f.properties={}),f.properties.label=h.properties[t.label],l.push(f)}i=i.concat(l)}const a=t.borderColor?I([t.borderColor])[0]:[255,255,255],o="borderWidth"in t?parseInt(t.borderWidth):0,n=t.opacity||.25;let r=!0;"visible"in t&&(r=t.visible);let d=!1;"onTop"in t&&(d=!!t.onTop);const c={features:i,opacity:n,borderWidth:o,borderColor:a,visible:r,onTop:d};this.bgLayers[e]=c,this.bgLayers={...this.bgLayers}}catch(t){console.error(""+t)}this.redraw+=1}},async mounted(){try{if(this.dbClearTooltip=Q(this.clearTooltip,1e3),this.setEmbeddedMode(),this.clearData(),await this.getVizDetails(),this.vizDetails.center&&typeof this.vizDetails.center=="string"&&(this.vizDetails.center=this.vizDetails.center.split(",").map(e=>parseFloat(e)),this.config.center=this.config.center.split(",").map(e=>parseFloat(e))),this.config.center&&(Math.abs(this.config.center[0])>180||Math.abs(this.config.center[1])>90)){this.$emit("error",`Invalid map center, doesn't look like longitude/latitude: ${this.config.center}`);const e=this.globalState.viewState;this.vizDetails.center=[e.longitude,e.latitude],this.config.center=[e.longitude,e.latitude],this.vizDetails.zoom=e.zoom,this.config.zoom=e.zoom}if(this.buildOldJoinLookups(),this.filterDefinitions=this.parseFilterDefinitions(this.vizDetails.filters),this.needsInitialMapExtent&&this.vizDetails.center){this.needsInitialMapExtent=!1;const e={center:this.vizDetails.center,zoom:this.vizDetails.zoom||9,bearing:this.vizDetails.bearing||0,pitch:this.vizDetails.pitch||0,initial:!0};this.vizDetails.mapIsIndependent?this.initialView=e:this.$store.commit("setMapCamera",e)}this.expColors=this.config.display?.fill?.exponentColors,this.dataFillColors=L.state.isDarkMode?"#44445580":"#dddddd80",this.config.display.fill||(this.config.display.fill={}),this.config.display?.fill?.values&&(this.config.display.fill.values=this.convertCommasToArray(this.config.display.fill.values)),await this.loadBoundaries(),this.filterShapesNow(),this.needsInitialMapExtent&&!this.vizDetails.center&&(await this.calculateAndMoveToCenter(),this.needsInitialMapExtent=!1),this.isLoaded=!0,this.$emit("isLoaded"),await this.$nextTick(),await this.loadDatasets(),this.datasets=Object.assign({},this.datasets),this.vizDetails=Object.assign({},this.vizDetails),this.honorQueryParameters(),this.statusText="",this.loadBackgroundLayers()}catch(e){this.$emit("error",""+e),this.statusText="",this.$emit("isLoaded")}},beforeDestroy(){this.clearData(),this.legendStore.clear(),this.resizer?.disconnect(),this.myDataManager.removeFilterListener(this.config,this.processFiltersNow),this.$store.commit("setFullScreen",!1)}});var xt=function(){var t=this,i=t._self._c;return t._self._setupProxy,i("div",{staticClass:"shapefile-viewer",attrs:{oncontextmenu:"return false"}},[t.showJoiner?i("modal-id-column-picker",t._b({attrs:{header:"Which column contains the unique ID for each shape/feature?"},on:{join:t.cbDatasetJoined}},"modal-id-column-picker",t.datasetJoinSelector,!1)):t._e(),t.statusText?i("div",{staticClass:"status-box"},[i("p",[t._v(t._s(t.statusText))]),t.loadProgress>0?i("b-progress",{staticClass:"load-progress",attrs:{value:t.loadProgress,rounded:!1,type:"is-success"}}):t._e()],1):t._e(),i("div",{staticClass:"main-layout",on:{mousemove:t.dividerDragging}},[i("div",{directives:[{name:"show",rawName:"v-show",value:t.showLegend,expression:"showLegend"}],staticClass:"dragger",on:{mousedown:t.dividerDragStart,mouseup:t.dividerDragEnd,mousemove:function(s){return s.stopPropagation(),t.dividerDragging.apply(null,arguments)}}}),i("div",{directives:[{name:"show",rawName:"v-show",value:t.showLegend,expression:"showLegend"}],staticClass:"new-rightside-info-panel",style:{width:`${t.legendSectionWidth}px`}},[i("div",{staticClass:"legend-panel scrolly"},[t.legendStore.state?.sections?.length?t._e():i("p",{staticStyle:{"font-size":"1.1rem"}},[i("b",[t._v("INFO PANEL")])]),i("legend-box",{attrs:{legendStore:t.legendStore}}),Object.keys(t.bgLayers).length?i("div",{staticClass:"bglayer-section flex-col"},[i("h5",[t._v("Layers")]),t._l(Object.keys(t.bgLayers),function(s){return i("b-checkbox",{key:s,staticClass:"simple-checkbox",on:{input:t.updateBgLayers},model:{value:t.bgLayers[s].visible,callback:function(a){t.$set(t.bgLayers[s],"visible",a)},expression:"bgLayers[layer].visible"}},[t._v(t._s(s))])})],2):t._e()],1),t.tooltipHtml&&!t.statusText?i("div",{staticClass:"tooltip-html flex-col",on:{mouseover:function(s){t.wantToClearTooltip=!1},mouseout:function(s){t.wantToClearTooltip=!0}}},[i("div",{staticClass:"the-html",domProps:{innerHTML:t._s(t.tooltipHtml)}}),t.tooltipDesiredColumns.length?i("div",{staticClass:"edit-hint",staticStyle:{"text-align":"right"}},[i("a",{on:{click:function(s){t.showTooltipConfigurator=!0}}},[t._v("Show/hide...")])]):t._e()]):t._e()]),i("div",{staticClass:"area-map",attrs:{id:`container-${t.layerId}`}},[!t.showLegend&&!t.statusText&&t.tooltipHtml?i("div",{staticClass:"tooltip-when-no-legend-present flex-col",on:{mouseover:function(s){t.wantToClearTooltip=!1},mouseout:function(s){t.wantToClearTooltip=!0}}},[i("div",{staticClass:"the-html",domProps:{innerHTML:t._s(t.tooltipHtml)}}),t.tooltipDesiredColumns.length?i("a",{staticStyle:{textAlign:"right"},on:{click:function(s){t.showTooltipConfigurator=!0}}},[t._v("Show/hide...")]):t._e()]):t._e(),t.needsInitialMapExtent?t._e():i("geojson-layer",{staticClass:"map-layers",attrs:{bgLayers:t.bgLayers,cbTooltip:t.cbTooltip,cbClickEvent:t.handleClickEvent,dark:t.globalState.isDarkMode,features:t.boundaries,featureFilter:t.boundaryFilters,fillColors:t.dataFillColors,fillHeights:t.dataFillHeights,highlightedLinkIndex:t.highlightedLinkIndex,initialView:t.initialView,isRGBA:t.isRGBA,isAtlantis:t.isAtlantis,lineColors:t.dataLineColors,lineWidths:t.dataLineWidths,mapIsIndependent:!!t.vizDetails.mapIsIndependent,opacity:t.sliderOpacity/100*(t.sliderOpacity/100),pointRadii:t.dataPointRadii,redraw:t.redraw,screenshot:t.triggerScreenshot,viewId:t.layerId}}),t.showTooltipConfigurator?i("div",{staticClass:"modal modal-tooltip-picker flex-col",on:{mouseover:function(s){t.wantToClearTooltip=!1}}},[i("h4",[t._v("Configure tooltips")]),i("p",{staticStyle:{margin:"0.5rem auto 0 0.75rem"}},[t._v("Select feature columns to be displayed in default tooltips.")]),i("div",{staticClass:"flex-row",staticStyle:{margin:"0.25rem auto 0 0.75rem",gap:"0.25rem"}},[i("b-button",{staticClass:"is-small",attrs:{type:"is-link",outlined:""},on:{click:t.setDesiredTooltipsNone}},[t._v("None")]),i("b-button",{staticClass:"is-small",attrs:{type:"is-link",outlined:""},on:{click:t.setDesiredTooltipsAll}},[t._v(" All ")])],1),i("div",{staticClass:"tooltip-items flex-col flex1"},t._l(t.tooltipDesiredColumns,function(s,a){return i("b-checkbox",{key:s.col,staticClass:"cbspace",model:{value:s.enabled,callback:function(o){t.$set(s,"enabled",o)},expression:"item.enabled"}},[t._v(" "+t._s(s.col))])}),1),i("div",{staticClass:"close-row flex-row",staticStyle:{padding:"0.5rem","margin-left":"auto",gap:"0.25rem"}},[i("b-button",{staticClass:"is-small",attrs:{type:"is-success"},on:{click:function(s){t.showTooltipConfigurator=!1}}},[t._v(" Close ")])],1)]):t._e(),t.isLoaded?i("viz-configurator",{attrs:{embedded:t.isEmbedded,sections:t.configuratorSections,fileSystem:t.fileSystem,subfolder:t.subfolder,yamlConfig:t.generatedExportFilename,vizDetails:t.vizDetails,datasets:t.datasets,legendStore:t.legendStore,filterDefinitions:t.currentUIFilterDefinitions},on:{update:t.changeConfiguration,screenshot:t.takeScreenshot,toggleLegend:function(s){t.showLegend=!t.showLegend}}}):t._e(),t.isAreaMode?i("div",{staticClass:"width-sliders flex-row",style:{backgroundColor:t.globalState.isDarkMode?"#00000099":"#ffffffaa"}},[i("img",{staticClass:"icon-blue-ramp",attrs:{src:t.icons.blueramp}}),i("b-slider",{staticClass:"pie-slider",attrs:{type:"is-success",tooltip:!0,size:"is-small",min:0,max:100},model:{value:t.sliderOpacity,callback:function(s){t.sliderOpacity=s},expression:"sliderOpacity"}})],1):t._e(),t.isLoaded&&!t.vizDetails.mapIsIndependent?i("zoom-buttons"):t._e(),!t.isEmbedded&&t.isLoaded&&Object.keys(t.filters).length?i("div",{staticClass:"config-bar",class:{"is-standalone":!t.configFromDashboard,"is-disabled":!t.isLoaded}}):t._e(),t._l(Object.keys(t.filters),function(s){return i("div",{staticClass:"filter"},[i("p",[t._v(t._s(s))]),i("b-dropdown",{attrs:{scrollable:t.filters[s].active.length>10,"max-height":"250",multiple:"","aria-role":"list","mobile-modal":!1,"close-on-click":!0},on:{change:function(a){return t.handleUserSelectedNewFilters(s)}},scopedSlots:t._u([{key:"trigger",fn:function({active:a}){return[i("b-button",{staticClass:"is-primary",attrs:{type:t.filters[s].active.length?"":"is-outlined",label:t.filterLabel(s)}})]}}],null,!0),model:{value:t.filters[s].active,callback:function(a){t.$set(t.filters[s],"active",a)},expression:"filters[filter].active"}},t._l(t.filters[s].options,function(a){return i("b-dropdown-item",{key:a,attrs:{value:a,"aria-role":"listitem"}},[t._v(t._s(a))])}),1)],1)})],2)])],1)},$t=[],St=_(Ft,xt,$t,!1,null,"943df044");const ye=St.exports;export{ye as default};
