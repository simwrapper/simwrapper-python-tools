import{c as _,d as R,g as D,m as B,n as J,D as H,i as L}from"./index-BX7jQcoh.js";import{r as q,C as k}from"./Coords-C-Mhj230.js";import{c as T}from"./turf.es-BzqbG201.js";import{r as G,G as U}from"./geo-utils-CCVst3B0.js";import{Y as N}from"./index-DFKcNkqO.js";import{G as K,S as Y,M as X,i as j}from"./ModalIdColumnPicker-BNCiGWd9.js";import{d as Z,H as Q}from"./HTTPFileSystem-D9FfZC5j.js";import{O as z,L as tt}from"./LineOffsetLayer-BT_eFkEQ.js";import{M as et}from"./mapbox-overlay-HS93bZkL.js";import{D as I}from"./data-filter-extension-BJBYmUft.js";import{L as it}from"./line-layer-BJTc6V-8.js";import{r as O}from"./cubehelix-BzW-tINw.js";import{M as w}from"./ColorsAndWidths-CaSMrknU.js";import{V as st}from"./VizConfigurator-C_37ptpH.js";import{L as at}from"./LegendBox-D8mLazfP.js";import{Z as ot}from"./ZoomButtons-PxSjzru1.js";import{D as rt}from"./DrawingTool-DQR36Aq1.js";import{c as nt,D as lt}from"./DashboardDataManager-DOwC_6nC.js";import{L as dt}from"./LegendStore-CGgeb9zL.js";import{B as M}from"./BackgroundLayers-CUd5LA7y.js";import"./geojson-layer-uU2lasyR.js";import"./layer-T9N9JmIf.js";import"./papaparse.min-ClXMzAJ8.js";import"./PathOffsetLayer-CjYw_Iig.js";import"./fxp-DjoqftHf.js";import"./layer-extension-LbH36Bf-.js";import"./threshold-CrWFx_nu.js";import"./index-_doEQLKC.js";import"./rainbow-DNS2KC2A.js";import"./lodash-CH54M7xw.js";import"./FileSelector-ByvkpmD-.js";import"./index-lhh_utkZ.js";import"./group-hI8ly2Wr.js";import"./sequential-pySAYR1V.js";import"./pow-RbZoge3Z.js";import"./precisionRound-CRsIqO1V.js";var F,A;function ht(){if(A)return F;A=1;function e(s){return s>=55296&&s<=56319}function t(s){return s>=56320&&s<=57343}return F=function(i,a,o){if(typeof a!="string")throw new Error("Input must be string");for(var r=a.length,n=0,l,h,d=0;d<r;d+=1){if(l=a.charCodeAt(d),h=a[d],e(l)&&t(a.charCodeAt(d+1))&&(d+=1,h+=a[d]),n+=i(h),n===o)return a.slice(0,d+1);if(n>o)return a.slice(0,d-h.length+1)}return a},F}var $,W;function ct(){if(W)return $;W=1;function e(s){return s>=55296&&s<=56319}function t(s){return s>=56320&&s<=57343}return $=function(i){if(typeof i!="string")throw new Error("Input must be string");for(var a=i.length,o=0,r=null,n=null,l=0;l<a;l++)r=i.charCodeAt(l),t(r)?n!=null&&e(n)?o+=1:o+=3:r<=127?o+=1:r>=128&&r<=2047?o+=2:r>=2048&&r<=65535&&(o+=3),n=r;return o},$}var x,E;function ut(){if(E)return x;E=1;var e=ht(),t=ct();return x=e.bind(null,t),x}var S,P;function ft(){if(P)return S;P=1;var e=ut(),t=/[\/\?<>\\:\*\|"]/g,s=/[\x00-\x1f\x80-\x9f]/g,i=/^\.+$/,a=/^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i,o=/[\. ]+$/;function r(n,l){if(typeof n!="string")throw new Error("Input must be string");var h=n.replace(t,l).replace(s,l).replace(i,l).replace(a,l).replace(o,l);return e(h,255)}return S=function(n,l){var h=l&&l.replacement||"",d=r(n,h);return h===""?d:r(d,"")},S}var mt=ft();const pt=_(mt),V="/",gt=R({name:"GeojsonDeckComponent",props:{features:{type:Array},bgLayers:{type:Object},cbTooltip:{type:Function,required:!0},cbClickEvent:{type:Function,required:!0},dark:{type:Boolean,required:!0},featureFilter:{type:Float32Array,required:!0},fillColors:{type:[String,Uint8ClampedArray],required:!0},fillHeights:{type:[Number,Float32Array],required:!0},highlightedLinkIndex:{type:Number},initialView:{type:Object},isRGBA:{type:Boolean,required:!0},isAtlantis:{type:Boolean,required:!0},lineColors:{type:[String,Uint8ClampedArray]},lineWidths:{type:[Number,Float32Array],required:!0},mapIsIndependent:{type:Boolean,required:!0},opacity:{type:Number,required:!0},pointRadii:{type:[Number,Float32Array],required:!0},redraw:{type:Number,required:!0},screenshot:{type:Number,required:!0},viewId:{type:Number,required:!0}},data(){return{mymap:null,deckOverlay:null,globalState:D.state,screenshotCount:this.screenshot,tooltipHTML:"",tooltipStyle:{position:"absolute",padding:"4px 8px",display:"block",top:0,left:0,color:this.dark?"#ccc":"#223",backgroundColor:this.dark?"#2a3c4f":"white",zIndex:2e4}}},watch:{screenshot(){this.mymap&&this.deckOverlay&&Y.saveMapWithOverlay(this.mymap)},layers(){this.deckOverlay&&this.deckOverlay.setProps({layers:this.layers})},dark(){let e;this.hasBackgroundMap?e=`${V}map-styles/${this.globalState.isDarkMode?"dark":"positron"}.json`:e={version:8,sources:{},layers:[]},this.mymap?.setStyle(e)},"globalState.viewState"(){if(this.mapIsIndependent)return;const e=this.globalState.viewState,t=this.mymap?.getCenter();if(e.longitude!==t.lng||e.latitude!==t.lat||e.zoom!==this.mymap?.getZoom()||e.pitch!==this.mymap?.getPitch()||e.bearing!==this.mymap?.getBearing()){console.log("JUMPING");const s=Object.assign({center:{lng:e.longitude,lat:e.latitude}},e);this.mymap?.jumpTo(s)}}},computed:{isTakingScreenshot(){return this.screenshot>this.screenshotCount},isStroked(){return!!this.lineColors&&this.lineWidths!==0},hasBackgroundMap(){return!this.isAtlantis},cbFillColor(){let e;if(typeof this.fillColors=="string"){const t=O(this.fillColors);e=[t.r,t.g,t.b]}else e=(t,s)=>this.isRGBA?[this.fillColors[s.index*4+0],this.fillColors[s.index*4+1],this.fillColors[s.index*4+2],this.fillColors[s.index*4+3]]:[this.fillColors[s.index*3+0],this.fillColors[s.index*3+1],this.fillColors[s.index*3+2],255];return e},cbLineColor(){let e;if(typeof this.lineColors=="string"){const t=O(this.lineColors);e=[t.r,t.g,t.b],this.isStroked||e.push(0)}else e=(t,s)=>s?.index?this.lineColors?[this.lineColors[s.index*3+0],this.lineColors[s.index*3+1],this.lineColors[s.index*3+2],255]:[0,0,0,0]:[0,0,0,0];return e},cbLineWidth(){let e;return typeof this.lineWidths=="number"?e=this.lineWidths:e=(t,s)=>this.lineWidths[s.index],e},cbPointRadius(){let e;return typeof this.pointRadii=="number"?e=this.pointRadii:e=(t,s)=>this.pointRadii[s.index],e},cbFillHeight(){let e;return typeof this.fillHeights=="number"?e=this.fillHeights:e=(t,s)=>this.fillHeights[s.index],e},lineLayers(){if(!this.isStroked)return{linksData:[],hasPolygons:!0};const e=[];let t=!1;const s=[];return(this.features||[]).forEach((a,o)=>{let r;switch(a.geometry.type){case"Polygon":r=a.geometry.coordinates[0],t=!0;break;case"MultiPolygon":r=a.geometry.coordinates[0][0],t=!0;break;case"LineString":r=a.geometry.coordinates;break;case"MultiLineString":r=a.geometry.coordinates[0];break;case"Point":case"MultiPoint":default:return t=!0,{linksData:[],hasPolygons:t}}if(!r)return console.warn(`---Feature ${o+1} has no coordinates:`),console.warn(a),{linksData:[],hasPolygons:t};const n=!Array.isArray(this.cbLineColor),l=typeof this.cbLineWidth!="number";for(let h=1;h<r.length;h++){const d={path:[r[h-1],r[h]]};n&&(d.color=this.cbLineColor(null,{index:o})),l&&(d.width=this.cbLineWidth(null,{index:o})),d.feature_idx=o,this.featureFilter.length&&s.push(this.featureFilter[o]),e.push(d)}}),{linksData:e,hasPolygons:t,filterValues:s}},layers(){const e=[],t=this.bgLayers?.layers();if(t&&e.push(...t.layersBelow),this.lineLayers.hasPolygons&&e.push(new K({id:"geoJsonOffsetLayer",beforeId:"water",data:this.features,getLineWidth:this.cbLineWidth,getLineColor:this.cbLineColor,getFillColor:this.cbFillColor,getPointRadius:this.cbPointRadius,getElevation:this.cbFillHeight,extruded:!!this.fillHeights,highlightedObjectIndex:this.highlightedLinkIndex,highlightColor:[255,255,255,160],lineWidthUnits:"pixels",lineWidthScale:1,lineWidthMinPixels:0,lineWidthMaxPixels:50,getOffset:z.RIGHT,opacity:this.opacity,pickable:!0,pointRadiusUnits:"pixels",pointRadiusMinPixels:2,stroked:this.isStroked,useDevicePixels:this.isTakingScreenshot,fp64:!1,updateTriggers:{getFillColor:this.fillColors,getLineColor:this.lineColors,getLineWidth:this.lineWidths,getPointRadius:this.pointRadii,getElevation:this.fillHeights,getFilterValue:this.featureFilter},transitions:{getFillColor:300,getLineColor:300,getLineWidth:300,getPointRadius:300},parameters:{depthTest:!!this.fillHeights,fp64:!1},extensions:[new I({filterSize:1})],filterRange:[0,1],getFilterValue:(s,i)=>this.featureFilter[i.index]})),this.isStroked){const s=this.lineLayers.filterValues||this.featureFilter,i=typeof this.cbLineWidth=="number"?it:tt,a=Array.isArray(this.cbLineColor)?this.cbLineColor:o=>o.color;e.push(new i({id:"linksLayer",data:this.lineLayers.linksData,getColor:a,getWidth:typeof this.cbLineWidth=="number"?this.cbLineWidth:o=>o.width,getSourcePosition:o=>o.path[0],getTargetPosition:o=>o.path[1],pickable:!0,autoHighlight:!0,highlightedObjectIndex:this.highlightedLinkIndex==-1?null:this.highlightedLinkIndex,highlightColor:[255,255,255,160],opacity:1,widthUnits:"pixels",widthMinPixels:1,offsetDirection:z.RIGHT,transitions:{getColor:300,getWidth:300},parameters:{depthTest:!!this.fillHeights,fp64:!1},extensions:[new I({filterSize:1})],filterRange:[0,1],getFilterValue:(o,r)=>s[r.index]}))}return t&&e.push(...t.layersOnTop),e}},mounted(){let e;this.hasBackgroundMap?e=`${V}map-styles/${this.globalState.isDarkMode?"dark":"positron"}.json`:e={version:8,sources:{},layers:[]};const t=`map-${this.viewId}`,s=this.globalState.viewState.center,i=this.globalState.viewState.zoom;this.mymap=new B.Map({container:t,style:e,center:s,zoom:i,canvasContextAttributes:{preserveDrawingBuffer:!0}}),this.mymap.on("move",this.handleMove),this.mymap.on("style.load",()=>{this.deckOverlay=new et({interleaved:!0,layers:this.layers,onClick:this.handleClick,onHover:this.handleHover,onDrag:this.handleHover,pickingRadius:2,getCursor:a=>a.isHovering?"pointer":"grab"}),this.mymap?.addControl(this.deckOverlay)})},beforeDestroy(){this.deckOverlay&&this.mymap?.removeControl(this.deckOverlay),this.mymap?.remove(),this.mymap=null},methods:{handleMove(){if(this.mapIsIndependent)return;const e=this.mymap?.getCenter(),t={center:[e.lng,e.lat],zoom:this.mymap?.getZoom(),bearing:this.mymap?.getBearing(),pitch:this.mymap?.getPitch(),jump:!0};D.commit("setMapCamera",t)},getTooltip({object:e,index:t}){let s=t;e&&"feature_idx"in e&&(s=e.feature_idx),this.cbTooltip&&this.cbTooltip(s,e)},handleClick(e,t){this.cbClickEvent&&this.cbClickEvent(e)},handleHover(e,t){if(e.index==-1){this.cbTooltip(-1,null);return}this.getTooltip(e)}}});var yt=function(){var t=this,s=t._self._c;return t._self._setupProxy,s("div",{staticClass:"deck-map flex-col"},[s("div",{staticClass:"map-container",attrs:{id:`map-${t.viewId}`}})])},bt=[],Ct=J(gt,yt,bt,!1,null,null);const vt=Ct.exports,wt="/assets/icon-blue-ramp-D1d4h-6x.png",Dt=R({name:"ShapeFilePlugin",components:{LegendBox:at,GeojsonLayer:vt,ModalIdColumnPicker:X,VizConfigurator:st,ZoomButtons:ot,DrawingTool:rt},props:{root:{type:String,required:!0},subfolder:{type:String,required:!0},datamanager:{type:Object},configFromDashboard:{type:Object},yamlConfig:String,thumbnail:Boolean},data(){return{icons:{blueramp:wt},opacitySlider:50,avroNetwork:null,isAtlantis:!1,isAreaMode:!1,isAvroFile:!1,isDraggingDivider:0,isDragHappening:!1,isLoaded:!1,dragStartWidth:200,legendSectionWidth:200,boundaries:[],centroids:[],cbDatasetJoined:void 0,legendStore:new dt,chosenNewFilterColumn:"",boundaryDataTable:{},dataFillColors:"#888",dataLineColors:"",dataLineWidths:1,dataPointRadii:5,dataFillHeights:0,dataCalculatedValues:null,dataNormalizedValues:null,constantLineWidth:null,dataCalculatedValueLabel:"",globalStore:D,globalState:D.state,layerId:Math.floor(1e12*Math.random()),dbClearTooltip:{},wantToClearTooltip:!1,activeColumn:"",useCircles:!1,sliderOpacity:100,maxValue:1e3,expColors:!1,isRGBA:!1,statusText:"Loading...",filters:{},needsInitialMapExtent:!0,datasetJoinColumn:"",featureJoinColumn:"",triggerScreenshot:0,redraw:0,datasetKeyToFilename:{},datasetJoinSelector:{},showJoiner:!1,showLegend:!1,myDataManager:this.datamanager||new lt(this.root,this.subfolder),config:{},currentUIFilterDefinitions:{},currentUIFillColorDefinitions:{},currentUILineColorDefinitions:{},filterDefinitions:[],isEmbedded:!1,resizer:null,boundaryFilters:new Float32Array(0),boundaryJoinLookups:{},datasetValuesColumn:"",tooltipHtml:"",tooltipIsFixed:!1,tooltipDesiredColumns:[],showTooltipConfigurator:!1,highlightedLinkIndex:-1,bgLayers:{},backgroundLayers:null,initialView:null,vizDetails:{title:"",description:"",datasets:{},useSlider:!1,showDifferences:!1,shpFile:"",dbfFile:"",network:"",geojsonFile:"",projection:"",widthFactor:null,sum:!1,filters:[],shapes:"",zoom:null,center:null,pitch:null,bearing:null,mapIsIndependent:!1,display:{fill:{},fillHeight:{},color:{},width:{},lineColor:{},lineWidth:{},radius:{}},tooltip:[],backgroundLayers:{}},datasets:{},loadProgress:0,loadSteps:0,totalLoadSteps:6}},computed:{fileApi(){return new Q(this.fileSystem,D)},fileSystem(){const e=this.$store.state.svnProjects.filter(t=>t.slug===this.root);if(e.length===0)throw console.log("no such project"),Error;return e[0]},configuratorSections(){return this.isAreaMode?["fill-color","fill-height","line-color","line-width","circle-radius","layers","filters"]:["line-color","line-width","layers","filters"]},datasetChoices(){return Object.keys(this.datasets)},generatedExportFilename(){let e=pt(this.yamlConfig??"");return e=e.replaceAll(" ","-"),e.startsWith("viz-map-")||(e="viz-map-"+e),!e.endsWith(".yml")&&!e.endsWith(".yaml")&&(e=e+".yaml"),e}},watch:{},methods:{setDesiredTooltipsNone(){this.tooltipDesiredColumns.forEach(e=>e.enabled=!1)},setDesiredTooltipsAll(){this.tooltipDesiredColumns.forEach(e=>e.enabled=!0)},setupTooltipDesiredColumns(){try{return Object.keys(this.boundaryDataTable).map(t=>({col:t,enabled:!0}))}catch{return[]}},incrementLoadProgress(){this.loadSteps+=1,this.loadProgress=100*this.loadSteps/this.totalLoadSteps},dividerDragStart(e){this.isDraggingDivider=e.clientX,this.dragStartWidth=this.legendSectionWidth},dividerDragEnd(e){this.isDraggingDivider=0},dividerDragging(e){if(!this.isDraggingDivider)return;const t=this.isDraggingDivider-e.clientX;this.legendSectionWidth=Math.max(0,this.dragStartWidth+t)},takeScreenshot(){this.triggerScreenshot++},setEmbeddedMode(){"embed"in this.$route.query&&(console.log("EMBEDDED MODE"),this.isEmbedded=!0,this.$store.commit("setShowLeftBar",!1),this.$store.commit("setFullWidth",!0))},columnsInDataset(e){const t=this.datasets[e];return Object.keys(t)},filterShapesNow(){const e=this.filterDefinitions.filter(s=>s.dataset==="shapes");if(this.boundaryFilters=new Float32Array(this.boundaries.length),!e.length)return;const t=/^(<|>)/;for(const s of e){let i=s.value,a="";if(i=="@categorical")a="@categorical",i="";else if(t.test(i))i.startsWith("<=")?(a="<=",i=parseFloat(i.substring(2).trim())):i.startsWith(">=")?(a=">=",i=parseFloat(i.substring(2).trim())):i.startsWith("<")?(a="<",i=parseFloat(i.substring(1).trim())):i.startsWith(">")&&(a=">",i=parseFloat(i.substring(1).trim()));else if(typeof i=="string")if(i.indexOf(",")>-1)i=i.split(",").map(n=>n.trim()).map(n=>Number.isNaN(parseFloat(n))?n:parseFloat(n));else{const n=parseFloat(i);Number.isNaN(n)||(i=n)}Array.isArray(i)||(i=[i]);const o={conditional:a,invert:s.invert||!1,values:i},r=this.boundaryDataTable[s.column].values;for(let n=0;n<this.boundaries.length;n++)nt(o,r[n])||(this.boundaryFilters[n]=-1)}},truncateFractionalPart(e,t){if(typeof e!="number")return e;let s=""+e;return s.includes(".")&&s.indexOf(".")===s.lastIndexOf(".")&&/\d$/.test(s)?s.substring(0,1+t+s.lastIndexOf(".")):e},async handleClickEvent(e){if(e.index!=-1){let t=e?.object?.feature_idx||-1;this.cbTooltip(t,e,!0),this.tooltipIsFixed=!0,this.highlightedLinkIndex=e.index}else this.tooltipIsFixed=!1,this.highlightedLinkIndex=-1,this.tooltipHtml=""},clearTooltip(){this.wantToClearTooltip&&this.highlightedLinkIndex==-1&&(this.tooltipHtml="")},cbTooltip(e,t,s=!1){if(this.tooltipIsFixed&&!s)return;if(t===null||!this.boundaries[e]?.properties){this.wantToClearTooltip=!0,this.dbClearTooltip();return}this.wantToClearTooltip=!1;const i=4,a=[];if(this.dataNormalizedValues){const u=this.dataCalculatedValueLabel??"Normalized Value";let m=this.truncateFractionalPart(this.dataNormalizedValues[e],i);a.push(`<tr><td style="text-align: right; padding-right: 0.5rem;">${u}</td><td><b>${m}</b></td></tr>`)}if(this.dataCalculatedValues){let u=this.dataCalculatedValueLabel??"Value";const m=this.dataNormalizedValues?u.substring(0,u.lastIndexOf("/")):u;let b=this.truncateFractionalPart(this.dataCalculatedValues[e],i);this.dataCalculatedValueLabel.startsWith("%")&&(b=`${b} %`),a.push(`<tr><td style="text-align: right; padding-right: 0.5rem;">${m}</td><td><b>${b}</b></td></tr>
         <tr><td>&nbsp;</td></tr>`)}let o="";const r=Object.entries(this.boundaries[e].properties);for(const[u,m]of r){if(m===null)continue;let b=this.truncateFractionalPart(m,i);o+=`<tr><td style="text-align: right; padding-right: 0.5rem;">${u}</td><td><b>${b}</b></td></tr>`}o&&a.push(o);let n;this.tooltipDesiredColumns.length?n=this.tooltipDesiredColumns.filter(u=>u.enabled).map(u=>u.col):n=Object.keys(this.boundaryDataTable);const l=new Set(["id","from","to","source","dest","nodeCoordinates","nodeId"]);if(n=n.filter(u=>!l.has(u)),this.vizDetails.tooltip?.length){const u=this.vizDetails.tooltip[0].indexOf(":")>-1?":":".";n=this.vizDetails.tooltip.map(m=>m.substring(m.indexOf(u)+1))}const h=["id","from","to",...n];let d="";if(h.forEach(u=>{if(this.boundaryDataTable[u]){let m=this.boundaryDataTable[u].values[e];if(m==null)return;typeof m=="number"&&(m=this.truncateFractionalPart(m,i)),d+=`<tr><td style="text-align: right; padding-right: 0.5rem;">${u}</td><td><b>${m}</b></td></tr>`}}),d&&a.push(d),!a.length){this.tooltipHtml="";return}const g=`<table>${a.join("")}</table>`;this.tooltipHtml=g},filterShapesNowOriginal(){const e=this.filterDefinitions.filter(t=>t.dataset==="shapes");if(this.boundaryFilters=new Float32Array(this.boundaries.length),!!e.length)for(let t=0;t<this.boundaries.length;t++)for(const s of e)!this.checkIsFiltered(t,s)&&(this.boundaryFilters[t]=-1)},checkIsFiltered(e,t){const i=(t.dataset=="shapes"?this.boundaryDataTable:this.datasets[t.dataset])[t.column].values[e];let a=!1,o=t.value;return typeof o=="string"&&o.indexOf(",")>-1&&(o=o.split(",").map(r=>r.trim()).map(r=>isNaN(parseFloat(r))?r:parseFloat(r))),Array.isArray(o)?a=o.indexOf(i)>-1:a=o==i,t.invert&&(a=!a),a},parseFilterDefinitions(e){if(!e)return[];const t=[];let s;Array.isArray(e)?s=e.map(i=>Object.entries(i)[0]):s=Object.entries(e);for(const i of s){const[a,o]=i,[r,n]=a.split("."),l={dataset:r,value:o,column:n.endsWith("!")?n.substring(0,n.length-1):n,invert:n.endsWith("!")};t.push(l)}return t},honorQueryParameters(){this.$route.query.show=="dots"&&(this.useCircles=!0)},setupQueryFilters(){const e=Object.keys(this.datasets);if(e.length!==2)return;const t=e[1],s=this.datasets[t],i=Object.keys(s),a=Object.keys(this.$route.query).filter(o=>i.indexOf(o)>-1);for(const o of a){this.filters[o]||(console.log("CREATING category filter:",o),this.handleUserCreatedNewFilter(`${t}:${o}`));const r=""+this.$route.query[o];r&&(this.filters[o].active=r.split(",")),this.myDataManager.setFilter({dataset:this.datasetKeyToFilename[t],column:o,value:this.filters[o].active}),this.activateFiltersForDataset(t)}},convertCommasToArray(e){return e===void 0?[]:(Array.isArray(e)||(e.indexOf(",")>-1?e=e.split(",").map(t=>t.trim()):e=[e.trim()]),e)},async getVizDetails(){const e={datasets:{},display:{fill:{}}};if(this.configFromDashboard)this.config=JSON.parse(JSON.stringify(this.configFromDashboard)),this.vizDetails=Object.assign({},e,this.configFromDashboard);else{const s=(this.yamlConfig??"").toLocaleLowerCase();if(s?.endsWith("yaml")||s?.endsWith("yml")){const i=await this.loadYamlConfig();this.config=i,this.vizDetails=Object.assign({},e,i)}if(/(\.xml)(|\.gz)$/.test(s)||/(\.geojson)(|\.gz)$/.test(s)||/\.shp$/.test(s)||/\.gpkg$/.test(s)||/network.*\.avro$/.test(s)||/.gmns.zip$/.test(s)||/.gmns$/.test(s)){let i=this.yamlConfig;s.endsWith("shp")&&(i=`Shapefile: ${this.yamlConfig}`),s.indexOf(".gmns")>-1&&(i=`GMNS Network: ${this.yamlConfig}`),this.vizDetails=Object.assign({},e,this.vizDetails,{title:i,description:this.subfolder,shapes:this.yamlConfig}),this.config=JSON.parse(JSON.stringify(this.vizDetails))}}this.vizDetails.backgroundLayers||(this.vizDetails.backgroundLayers={});const t=this.vizDetails.title||"Map";this.$emit("title",t)},buildOldJoinLookups(){const e={};for(const t of Object.keys(this.vizDetails.datasets||[])){const s=this.vizDetails.datasets[t].join;if(!s)continue;const i=s.indexOf(":");if(e[t]=s.substring(i+1),typeof this.vizDetails.shapes=="string"){const a=i>-1?s.substring(0,i):s;this.vizDetails.shapes={file:this.vizDetails.shapes,join:a}}}for(const t of Object.keys(this.vizDetails.display||[])){const i=this.vizDetails.display[t];(i.dataset||i.diff)&&!i.join&&(i.join=e[i.dataset])}},getFileSystem(e){const t=this.$store.state.svnProjects.filter(s=>s.slug===e);if(t.length===0)throw console.log("no such project"),Error;return t[0]},async loadYamlConfig(){const e=this.yamlConfig??"",t=e.indexOf("/")>-1?e:this.subfolder+"/"+e;try{const i=await this.fileApi.getFileText(t);return N.parse(i)}catch(i){const a=""+i;a.startsWith("YAMLSemantic")&&this.$emit("error",`${t}: ${a}`),console.log(`${t} not found, trying config folders`)}const{vizes:s}=await this.fileApi.findAllYamlConfigs(this.subfolder);if(s[e])try{const i=await this.fileApi.getFileText(s[e]);return N.parse(i)}catch{console.error(`Also failed to load ${s[e]}`)}this.$emit("error","Could not load YAML: "+t)},changeConfiguration(e){try{e.fill&&(this.vizDetails.display.fill=e.fill,this.handleNewFillColor(e.fill)),e.fillHeight&&(this.vizDetails.display.fillHeight=e.fillHeight,this.handleNewFillHeight(e.fillHeight)),e.lineColor&&(this.vizDetails.display.lineColor=e.lineColor,this.handleNewLineColor(e.lineColor)),e.lineWidth&&(this.vizDetails.display.lineWidth=e.lineWidth,this.handleNewLineWidth(e.lineWidth),this.currentUILineColorDefinitions&&this.handleNewLineColor(this.currentUILineColorDefinitions)),e.radius&&(this.vizDetails.display.radius=e.radius,this.handleNewRadius(e.radius)),e.dataset&&this.handleNewDataset(e.dataset),e.layers&&this.handleNewLayers(e.layers),e.filters&&this.handleNewFilters(e.filters)}catch(t){this.$emit("error",""+t)}},handleNewLayers(e){const t={};for(const s of e){const{title:i,...a}=s;t[i]=a}this.vizDetails.backgroundLayers=t;try{this.backgroundLayers=new M({vizDetails:this.vizDetails,fileApi:this.fileApi,subfolder:this.subfolder}),this.backgroundLayers.initialLoad(),this.bgLayers={...this.bgLayers}}catch(s){console.error("Error handling layers, check filenames and parameters: "+s)}},generateUniqueDatasetKeyFromFilename(e){if(!(e in this.vizDetails.datasets))return e;console.log(e,"not unique");for(let t=2;t<100;t++){let s=`${e}_${t}`;if(!(s in this.vizDetails.datasets))return s}return`${e}__${Math.floor(100+1e5*Math.random())}`},async handleNewDataset(e){let{key:t,dataTable:s,filename:i}=e;const o=this.generateUniqueDatasetKeyFromFilename(t),r=i||o;if(console.log("HANDLE NEW DATASET:",o,r),this.featureJoinColumn||(this.featureJoinColumn=await this.figureOutFeatureIdColumn()),console.log("---featureIDColumn",this.featureJoinColumn),!this.boundaryDataTable[this.featureJoinColumn])throw Error(`Geodata does not have property ${this.featureJoinColumn}`);this.myDataManager.setPreloadedDataset({key:this.datasetKeyToFilename[o],dataTable:s}),this.myDataManager.addFilterListener({dataset:this.datasetKeyToFilename[o],subfolder:this.subfolder},this.processFiltersNow),this.vizDetails.datasets[o]={file:r},this.vizDetails=Object.assign({},this.vizDetails),this.datasets[o]=s,this.datasets=Object.assign({},this.datasets)},setupJoin(e){const{dataTable:t,datasetId:s,dataJoinColumn:i}=e;if(!i||`@@${i}`in t)return;if(!this.boundaryDataTable[this.featureJoinColumn])throw Error(`Geodata does not have property ${this.featureJoinColumn}`);if(!t[i])throw Error(`Dataset ${s} does not have column ${i}`);const a={type:L.LOOKUP,values:[],name:`@@${i}`},o=t[i].values,r=this.getBoundaryOffsetLookup(this.featureJoinColumn);for(let n=0;n<o.length;n++){const l=r[o[n]];a.values[n]=l}t[`@@${i}`]=a,this.myDataManager.setPreloadedDataset({key:this.datasetKeyToFilename[s],dataTable:t}),this.vizDetails.datasets[s]={file:this.datasetKeyToFilename[s],join:this.featureJoinColumn===i?this.featureJoinColumn:`${this.featureJoinColumn}:${i}`},this.myDataManager.addFilterListener({dataset:this.datasetKeyToFilename[s],subfolder:this.subfolder},this.processFiltersNow),this.prepareTooltipData(e),this.datasets[s]=t},prepareTooltipData(e){const{dataTable:t,datasetId:s,dataJoinColumn:i}=e;let a=":";const o=this.vizDetails.tooltip||[];if(o.length&&(a=o[0].indexOf(":")>-1?":":"."),!o.length){const h=Object.values(this.vizDetails.display);for(const d of h)d.columnName&&d.dataset===s&&o.push(`${s}${a}${d.columnName}`)}const r=o.filter(h=>h.substring(0,h.indexOf(a)).startsWith(s)).map(h=>({id:h,column:h.substring(1+h.indexOf(a))}));if(!r.length)return;const n=t[i].values,l=this.getBoundaryOffsetLookup(this.featureJoinColumn);for(const h of r){if(!t[h.column]){this.$emit("error",`Tooltip references "${h.id}" but that column doesn't exist`);continue}for(let d=0;d<n.length;d++){const c=l[n[d]],g=this.boundaries[c],u=t[h.column].values[d];g&&(g.properties[h.id]=u)}}},getBoundaryOffsetLookup(e){if(this.boundaryJoinLookups[e])return this.boundaryJoinLookups[e];try{this.statusText="Joining datasets...",this.boundaryJoinLookups[e]={};const t=this.boundaryJoinLookups[e],s=this.boundaryDataTable[e].values;for(let i=0;i<this.boundaries.length;i++)t[s[i]]=i;return this.statusText="",t}catch{return console.warn("waahaa"),{}}},removeAnyOldFilters(e){const t=new Set(Object.keys(this.currentUIFilterDefinitions).filter(i=>!i.startsWith("shapes.")));new Set(Object.keys(e).filter(i=>!i.startsWith("shapes."))).forEach(i=>t.delete(i));for(const i of t){console.log("REMOVING",i);const a=i.indexOf("."),o=i.slice(0,a),r=i.slice(a+1);if(this.myDataManager.setFilter({dataset:this.datasetKeyToFilename[o],column:r,value:[]}),r in this.filters){const n=Object.assign({},this.$route.query);delete n[r],this.$router.replace({query:n}),delete this.filters[r]}}},async handleNewFilters(e){this.removeAnyOldFilters(e),this.currentUIFilterDefinitions=e;const t=this.parseFilterDefinitions(e);this.filterDefinitions=t,this.filterShapesNow(),Object.keys(this.datasets).forEach(async(s,i)=>{i!==0&&(await this.activateFiltersForDataset(s),this.processFiltersNow(s))})},handleColorDiffMode(e,t){if(!t.diffDatasets)return;const s=t.columnName,i=t.join||"",a=t.diffDatasets[0]||"",o=this.datasets[a],r=t.diffDatasets[1]||"",n=this.datasets[r],l=!!t.relative;if(o&&n){this.setupJoin({datasetId:a,dataTable:o,dataJoinColumn:i}),this.setupJoin({datasetId:r,dataTable:n,dataJoinColumn:i});const h=o[`@@${i}`],d=n[`@@${i}`],c=o[s],g=n[s];if(!c)throw Error(`Dataset ${a} does not contain column "${s}"`);if(!g)throw Error(`Dataset ${r} does not contain column "${s}"`);let u,m;if(t.normalize){const[f,y]=t.normalize.split(":");if(!this.datasets[f]||!this.datasets[f][y])throw Error(`${f} does not contain column "${y}"`);this.dataCalculatedValueLabel+=`/ ${y}`,u=this.datasets[f][y],this.datasetChoices[0]!==f&&(this.setupJoin({datasetId:f,dataTable:this.datasets[f],dataJoinColumn:i}),m=this.datasets[f][`@@${i}`])}const b={ramp:t.colorRamp?.ramp||"Viridis",style:t.colorRamp?.style||0,reverse:t.colorRamp?.reverse||!1,steps:t.colorRamp?.steps||9,breakpoints:t.colorRamp?.breakpoints},{rgbArray:v,legend:p,calculatedValues:C}=w.getColorsForDataColumn({numFeatures:this.boundaries.length,data:c,data2:g,lookup:h,lookup2:d,normalColumn:u,normalLookup:m,options:{colorRamp:b,fixedColors:t.fixedColors},filter:this.boundaryFilters,relative:l});if(!v)return;e==="fill"?this.dataFillColors=v:this.dataLineColors=v,this.dataCalculatedValues=C,this.dataCalculatedValueLabel=`${l?"% ":""}Diff: ${s}`,this.showLegend=!0,this.legendStore.setLegendSection({section:e==="fill"?"FillColor":"Line Color",column:c.name,values:p,diff:!0,relative:l,normalColumn:u?u.name:""})}},paintColorsWithFilter(e,t){const s=e==="fill"?this.currentUIFillColorDefinitions:this.currentUILineColorDefinitions,i=s.columnName,a=s.join==="@count"?t[`@@${i}`]:t[`@@${s.join}`];let o;if(s.normalize){const d=s.normalize.split(":");this.dataCalculatedValueLabel=i+"/"+d[1];const c=s.dataset;if(!this.datasets[d[0]]||!this.datasets[d[0]][d[1]])throw Error(`Dataset ${c} does not contain column "${i}"`);o=t[d[1]]}const r={numFeatures:this.boundaries.length,data:t[i],lookup:a,normalColumn:o,filter:this.boundaryFilters,options:s,join:s.join},{rgbArray:n,legend:l,calculatedValues:h}=w.getColorsForDataColumn(r);n&&(e==="fill"?this.dataFillColors=n:this.dataLineColors=n,this.dataCalculatedValues=h,this.showLegend=!0,this.legendStore.setLegendSection({section:e==="fill"?"FillColor":"Line Color",column:i,values:l}))},handleNewFillColor(e){const t="columnName"in e,s=!t;if(t){const f=e?.dataset,{filteredRows:y}=this.myDataManager.getFilteredDataset({dataset:`${f}`||""});if(y&&y.length){this.currentUIFillColorDefinitions=e,this.processFiltersNow(f);return}}if(s){this.paintColorsWithFilter("fill",e);return}const i=e;this.currentUIFillColorDefinitions=i;const a=i.columnName;if(i.diffDatasets){this.handleColorDiffMode("fill",i);return}if(!a){this.dataFillColors=i.fixedColors[0],this.dataCalculatedValueLabel="",this.legendStore.clear("FillColor");return}const o=i.dataset||"",r=this.datasets[o];if(this.dataCalculatedValueLabel="",!r){console.warn("color: no selected dataset yet, maybe still loading");return}const n=r[a];if(!n)throw Error(`Dataset ${o} does not contain column "${a}"`);this.dataCalculatedValueLabel=a??"",this.$emit("error","");let l="";if(i.join&&i.join!=="@count")l=i.join;else if(i.join==="@count")l=a;else if(this.datasetChoices.length>1){const f=this.datasetChoices[0];o!==f&&(console.warn("No join; lets hope user just wants to display data in boundary file"),this.$emit("error",`Specify the "Join by" column to link ${o} dataset values correctly!`))}this.setupJoin({datasetId:o,dataTable:r,dataJoinColumn:l});const h=r[`@@${l}`];let d,c;if(i.normalize){const[f,y]=i.normalize.split(":");if(!this.datasets[f]||!this.datasets[f][y])throw Error(`${f} does not contain column "${y}"`);this.dataCalculatedValueLabel+=`/ ${y}`,d=this.datasets[f][y],this.datasetChoices[0]!==f&&this.setupJoin({datasetId:f,dataTable:this.datasets[f],dataJoinColumn:l}),c=this.datasets[f][`@@${l}`]}const g={ramp:i.colorRamp?.ramp||"Viridis",style:i.colorRamp?.style||0,reverse:i.colorRamp?.reverse||!1,steps:i.colorRamp?.steps||9,breakpoints:i.colorRamp?.breakpoints||void 0};let u;if(i.transparency){const[f,y]=i.transparency.split("/");if(u=this.datasets[f][y],!u)throw Error(`Dataset ${f} does not contain column "${y}"`)}const m=w.getColorsForDataColumn({numFeatures:this.boundaries.length,data:n,transparency:u,normalColumn:d,normalLookup:c,lookup:h,filter:this.boundaryFilters,options:{colorRamp:g,fixedColors:i.fixedColors},join:i.join}),{rgbArray:b,legend:v,calculatedValues:p}=m,C=m.isRGBA||!1;b&&(this.dataFillColors=b,this.dataCalculatedValues=p,this.dataNormalizedValues=p||null,this.isRGBA=C,this.showLegend=!0,this.legendStore.setLegendSection({section:"FillColor",column:n.name,values:v,normalColumn:d?d.name:""}))},handleNewLineColor(e){if(e===!1){this.dataLineColors="",this.legendStore.clear("Line Color");return}const t="columnName"in e,s=!t;if(t){const o=e?.dataset;if(o){const{filteredRows:r}=this.myDataManager.getFilteredDataset({dataset:`${o}`||""});if(r&&r.length){this.currentUILineColorDefinitions=e,this.processFiltersNow(o);return}}}const i=e;if(s&&i.columnName!=="@0"){this.paintColorsWithFilter("lineColor",e);return}this.currentUILineColorDefinitions=i;const a=i.columnName;if(i.diffDatasets){this.handleColorDiffMode("lineColor",i);return}else if(a==="@0"){this.dataLineColors=this.isAreaMode?"":"#4E7AA7",this.dataCalculatedValueLabel="",this.legendStore.clear("Line Color");return}else if(a){const o=i.dataset||"",r=this.datasets[o];if(this.dataCalculatedValueLabel="",!r){console.warn("color: no selected dataset yet, maybe still loading");return}const n=r[a];if(!n)throw Error(`Dataset ${o} does not contain column "${a}"`);this.dataCalculatedValueLabel=a??"",this.$emit("error","");let l="";if(i.join&&i.join!=="@count")l=i.join;else if(i.join==="@count")l=a;else if(this.datasetChoices.length>1){const p=this.datasetChoices[0];o!==p&&(console.warn("No join; lets hope user just wants to display data in boundary file"),this.$emit("error",`Specify the "Join by" column to link ${o} dataset values correctly!`))}this.setupJoin({datasetId:o,dataTable:r,dataJoinColumn:l});const h=r[`@@${l}`];let d,c;if(i.normalize){const[p,C]=i.normalize.split(":");if(!this.datasets[p]||!this.datasets[p][C])throw Error(`${p} does not contain column "${C}"`);this.dataCalculatedValueLabel+=`/ ${C}`,d=this.datasets[p][C],this.datasetChoices[0]!==p&&(this.setupJoin({datasetId:p,dataTable:this.datasets[p],dataJoinColumn:l}),c=this.datasets[p][`@@${l}`])}const g={ramp:i.colorRamp?.ramp||"Viridis",style:i.colorRamp?.style||0,reverse:i.colorRamp?.reverse||!1,steps:i.colorRamp?.steps||9,breakpoints:i.colorRamp?.breakpoints},u=w.getColorsForDataColumn({numFeatures:this.boundaries.length,data:n,lookup:h,normalColumn:d,normalLookup:c,filter:this.boundaryFilters,options:{colorRamp:g,fixedColors:i.fixedColors},join:i.join}),{rgbArray:m,legend:b,calculatedValues:v}=u;if(!m)return;if(this.dataLineColors=m,this.dataCalculatedValues=v,this.dataNormalizedValues=v||null,u.hasCategory&&this.constantLineWidth!==null){const p=this.constantLineWidth,C=new Float32Array(this.boundaries.length).fill(1);Object.keys(u.hasCategory).forEach(f=>{C[f]=p}),this.dataLineWidths=C}this.showLegend=!0,this.legendStore.setLegendSection({section:"Line Color",column:n.name,values:b,normalColumn:d?d.name:""}),this.showLegend=!0}else{this.dataLineColors=i.fixedColors[0],this.dataCalculatedValueLabel="",this.legendStore.clear("Line Color");return}},handleNewLineWidth(e){const t=e.columnName||"";if(e.dataset&&/^@\d$/.test(e.dataset)){this.dataLineWidths=Number.parseInt(e.dataset.substring(1)),this.constantLineWidth=this.dataLineWidths,this.legendStore.clear("Line Width");return}else this.constantLineWidth=null;if(e.scaleFactor&&isNaN(e.scaleFactor)){this.dataLineWidths=1,this.legendStore.clear("Line Width");return}if(e.diffDatasets){const s=e.join||"",i=e.diffDatasets[0]||"",a=this.datasets[i],o=e.diffDatasets[1]||"",r=this.datasets[o];if(a&&r){this.setupJoin({datasetId:i,dataTable:a,dataJoinColumn:s}),this.setupJoin({datasetId:o,dataTable:r,dataJoinColumn:s});const n=a[`@@${s}`],l=r[`@@${s}`],h=a[t],d=r[t];if(!h)throw Error(`Dataset ${i} does not contain column "${t}"`);if(!d)throw Error(`Dataset ${o} does not contain column "${t}"`);const{array:c,legend:g,calculatedValues:u}=w.getWidthsForDataColumn({numFeatures:this.boundaries.length,data:h,data2:d,lookup:n,lookup2:l,options:e});this.dataLineWidths=c||0,this.dataCalculatedValues=u,this.dataCalculatedValueLabel="Diff: "+t,this.showLegend=!0,this.legendStore.setLegendSection({section:"Line Width",column:`${h.name} (Diff)`,values:g})}}else if(t){const s=e.dataset||"",i=this.datasets[s];if(i){const a=i[t];if(!a)throw Error(`Dataset ${s} does not contain column "${t}"`);this.$emit("error","");let o="";if(e.join&&e.join!=="@count")o=e.join;else if(e.join==="@count")o=t;else if(this.datasetChoices.length>1){const d=this.datasetChoices[0];s!==d&&(console.warn("No join; lets hope user just wants to display data in boundary file"),this.$emit("error",`Specify the "Join by" column to link ${s} dataset values correctly!`))}this.setupJoin({datasetId:s,dataTable:i,dataJoinColumn:o});const r=i[`@@${o}`],{array:n,legend:l,calculatedValues:h}=w.getWidthsForDataColumn({numFeatures:this.boundaries.length,data:a,lookup:r,join:e.join,options:e});this.dataLineWidths=n||0,this.dataCalculatedValues=h,this.dataCalculatedValueLabel=t,l.length?(this.showLegend=!0,this.legendStore.setLegendSection({section:"Line Width",column:a.name,values:l})):this.legendStore.clear("Line Width")}}else this.dataLineWidths=1,this.dataCalculatedValueLabel="",this.legendStore.clear("Line Width")},handleNewFillHeight(e){const t=e.columnName;if(t){const s=e.dataset||"",i=this.datasets[s];if(i){const a=i[t];if(!a)throw Error(`Dataset ${s} does not contain column "${t}"`);this.$emit("error","");let o="";if(e.join&&e.join!=="@count")o=e.join;else if(e.join==="@count")o=t;else if(this.datasetChoices.length>1){const c=this.datasetChoices[0];s!==c&&(console.warn("No join; lets hope user just wants to display data in boundary file"),this.$emit("error",`Specify the "Join by" column to link ${s} dataset values correctly!`))}this.setupJoin({datasetId:s,dataTable:i,dataJoinColumn:o});const r=i[`@@${o}`];let n;if(e.normalize){const c=e.normalize.split(":");if(!this.datasets[c[0]]||!this.datasets[c[0]][c[1]])throw Error(`Dataset ${s} does not contain column "${t}"`);n=this.datasets[c[0]][c[1]],this.dataCalculatedValueLabel=t+"/"+c[1]}const{heights:l,calculatedValues:h,normalizedValues:d}=w.getHeightsBasedOnNumericValues({length:this.boundaries.length,data:a,lookup:r,options:e,normalize:n,join:e.join});if(this.dataFillHeights=l,this.dataCalculatedValues=h,this.dataNormalizedValues=d||null,this.$store.state.viewState.pitch==0){const c=Object.assign({},this.$store.state.viewState,{pitch:30});this.$store.commit("setMapCamera",c)}}}else this.dataFillHeights=0,this.dataCalculatedValues=null,this.dataCalculatedValueLabel=""},handleNewRadius(e){const t=e.columnName;if(t){const s=e.dataset||"",i=this.datasets[s];if(!i)return;if(i){const a=i[t];if(!a)throw Error(`Dataset ${s} does not contain column "${t}"`);let o="";e.join&&e.join!=="@count"?o=e.join:e.join==="@count"?o=t:this.datasetChoices.length>1&&console.warn("No join; lets hope user just wants to display data in boundary file"),this.setupJoin({datasetId:s,dataTable:i,dataJoinColumn:o});const r=i[`@@${o}`],{radius:n,calculatedValues:l}=w.getRadiusForDataColumn({length:this.boundaries.length,data:a,lookup:r,join:o,options:e});this.dataPointRadii=n,this.dataCalculatedValues=l,this.dataCalculatedValueLabel=a.name}}else this.dataPointRadii=5},async handleMapClick(e){try{const{x:t,y:s,data:i}=e.points[0],a=this.config.groupBy,o=t}catch(t){console.error(t)}},async figureOutFeatureIdColumn(){if(this.featureJoinColumn)return this.featureJoinColumn;if(typeof this.vizDetails.shapes!="string"&&this.vizDetails.shapes.join)return this.isAvroFile&&this.vizDetails.shapes.join==="id"?"linkId":this.vizDetails.shapes.join;if(this.boundaries.length&&this.boundaries[0].id)return"id";if(typeof this.vizDetails.shapes!="string"&&this.vizDetails.shapes.join)return this.vizDetails.shapes.join;const e=this.datasets[Object.keys(this.datasets)[0]],t=Object.keys(e);if(t.length===1)return t[0];const s=await new Promise((i,a)=>{const o=new Set;this.boundaries[0].id&&o.add("id"),Object.keys(e).forEach(r=>o.add(r)),this.datasetJoinSelector={data1:{title:"Properties",columns:Array.from(o)}},this.showJoiner=!0,this.cbDatasetJoined=r=>{this.datasetJoinSelector={},this.showJoiner=!1,i(r)}});return s.length?s:"id"},async processFiltersNow(e){const{filteredRows:t}=this.myDataManager.getFilteredDataset({dataset:e||""}),s={};if(t){(t.length>0?Object.keys(t[0]):[]).forEach(r=>{const n={name:r,values:[],type:L.UNKNOWN};for(const l of t)n.values.push(l[r]);s[r]=n});const a=this.getBoundaryOffsetLookup(this.featureJoinColumn),o=new Float32Array(this.boundaryFilters.length);o.fill(1);for(const r of t){const n=r[this.featureJoinColumn],l=a[n];o[l]=0}for(let r=0;r<this.boundaryFilters.length;r++)o[r]&&(this.boundaryFilters[r]=-1)}try{this.currentUIFillColorDefinitions?.dataset&&this.handleNewFillColor(t?s:this.currentUIFillColorDefinitions),this.currentUILineColorDefinitions?.dataset&&this.handleNewLineColor(t?s:this.currentUILineColorDefinitions)}catch(i){this.$emit("error",""+i)}},async loadGMNSFeatures(e){const t=`${this.subfolder}/${e}`,s=await this.fileApi.getFileBlob(t),i=await j.load(t,s);return j.toGeojson(i).features},async loadAvroNetwork(e){const t=await this.myDataManager.getRoadNetwork(e,this.subfolder,this.vizDetails,null,!0),s=t.linkId.length,i=[];for(let a=0;a<s;a++){const o=t.linkId[a],r=[t.source.slice(a*2,a*2+2),t.dest.slice(a*2,a*2+2)],n={id:o,type:"Feature",properties:{},geometry:{type:"LineString",coordinates:r}};i.push(n)}return this.avroNetwork=t,this.isAvroFile=!0,i},updateStatus(e){this.statusText=e,this.incrementLoadProgress()},async loadXMLNetwork(e){if(!this.myDataManager)throw Error("no datamanager");this.statusText="Loading XML network...";const t=[];try{const s=await this.myDataManager.getRoadNetwork(e,this.subfolder,this.vizDetails,this.updateStatus),i=s.linkId.length,a=s.crs||"EPSG:4326",o=a!=="EPSG:4326"&&a!=="WGS84";this.isAtlantis=!!s.isAtlantis;for(let r=0;r<i;r++){const n=s.linkId[r],l=2*s.from[r],h=2*s.to[r];let d=[s.nodeCoordinates[l],s.nodeCoordinates[1+l]],c=[s.nodeCoordinates[h],s.nodeCoordinates[1+h]];o&&(d=k.toLngLat(a,d),c=k.toLngLat(a,c));const u={id:n,type:"Feature",properties:{},geometry:{type:"LineString",coordinates:[d,c]}};t.push(u)}this.avroNetwork=s,this.isAvroFile=!0}catch(s){this.$emit("error",""+s)}finally{return t}},async loadGeoPackage(e){this.statusText="Loading geopackage...",console.log("loading",e);const t=`${this.subfolder}/${e}`,i=await(await this.fileApi.getFileBlob(t)).arrayBuffer();return U.loadGeoPackageFromBuffer(i)},async loadBoundaries(){const e=this.config.boundaries||this.config.shapes||this.config.geojson||this.config.network||this.config.features;if(!e)return;let t=this.config.features?"shapes":e.file||e,s=[],i;try{this.statusText="Loading features...",this.incrementLoadProgress(),t.toLocaleLowerCase().endsWith("gpkg")?(console.log("--GPKG"),i=await this.loadGeoPackage(t)):t.startsWith("http")?(console.log("--HTTP to JSON file"),i=(await fetch(t).then(async n=>await n.json())).features):t.toLocaleLowerCase().endsWith(".shp")?(console.log("--SHP"),i=await this.loadShapefileFeatures(t)):t.toLocaleLowerCase().indexOf(".gmns")>-1?(console.log("--GMNS"),i=await this.loadGMNSFeatures(t)):t.toLocaleLowerCase().indexOf(".xml")>-1?(console.log("--MATSIM XML"),i=await this.loadXMLNetwork(t)):/network.*\.avro$/.test(t.toLocaleLowerCase())?(console.log("--AVRO"),i=await this.loadAvroNetwork(t)):this.config.features?(console.log("--DATAFRAME"),i=this.config.features):(console.log("--GEOJSON"),i=(await this.fileApi.getFileJson(`${this.subfolder}/${t}`)).features),await this.$nextTick(),this.statusText="Processing data...",this.incrementLoadProgress(),await this.$nextTick(),await this.$nextTick();let a=!0,o=!0,r=!1;i.forEach(n=>{const l=n.properties??{};"id"in n&&(l.id=n.id),s.push({...l}),n.properties={},(n.geometry.type=="Point"||n.geometry.type=="MultiPoint")&&(r=!0),a&&(n.geometry.type=="LineString"||n.geometry.type=="MultiLineString")&&(a=!1),o&&(n.geometry.type=="Polygon"||n.geometry.type=="MultiPolygon")&&(o=!1)}),await this.setFeaturePropertiesAsDataSource(t,[...s],e),this.incrementLoadProgress(),(r||!o)&&(this.isAreaMode=!0),this.statusText="Adding boundaries to map",await this.$nextTick(),this.incrementLoadProgress(),this.boundaries=i,this.incrementLoadProgress()}catch(a){const n=`${a.statusText||"Could not load"}: "${t}"`;throw this.statusText="",this.$emit("isLoaded"),Error(n)}if(!this.boundaries||this.boundaries.length===0)throw Error('No "features" found in shapes file')},async setFeaturePropertiesAsDataSource(e,t,s){let i;if(this.avroNetwork){const o={},r=[...this.avroNetwork.linkAttributes,"from","to"];r.sort();for(const n of r){const l=this.avroNetwork[n],h=Number.isFinite(l[0])||Number.isNaN(l[0])?L.NUMBER:L.STRING,d={name:n,values:l,type:h};o[n]=d}if(this.avroNetwork.allowedModes){const n=this.avroNetwork.modes,l=o.allowedModes;l.type=L.STRING,l.values=l.values.map(h=>n[h]),o.modes=l,delete o.allowedModes}i=await this.myDataManager.setRowWisePropertyTable(e,o,s),"linkId"in i&&!("id"in i)&&(i={id:i.linkId,...i},i.id.name="id"),this.avroNetwork=null}else i=await this.myDataManager.setFeatureProperties(e,t,s);this.boundaryDataTable=i;const a=e.substring(1+e.lastIndexOf("/"));this.datasets[a]=i,this.vizDetails.datasets[a]={file:a,join:this.datasetJoinColumn},this.config.datasets=Object.assign({},this.vizDetails.datasets),(!this.vizDetails.tooltip||!this.vizDetails.tooltip.length)&&(this.tooltipDesiredColumns=this.setupTooltipDesiredColumns())},async calculateAndMoveToCenter(){let e=0,t=0,s=0;const i=this.boundaries.length;for(let r=0;r<i;r+=256)try{const n=T(this.boundaries[r]);n?.geometry?.coordinates&&(e+=n.geometry.coordinates[0],t+=n.geometry.coordinates[1],s+=1)}catch{}e/=s,t/=s;let a=9;console.log("--- CALCULATED CENTER",e,t),(e==null||t==null)&&(e=30,t=30,a=5);const o={center:[e,t],bearing:0,pitch:0,zoom:a};this.initialView=o,this.vizDetails.mapIsIndependent||this.$store.commit("setMapCamera",o)},async generateCentroidsAndMapCenter(){this.statusText="Calculating centroids...",await this.$nextTick();const e=this.config?.shapes?.join||"id";let t=0,s=0,i=0;for(const a of this.boundaries){let o={};try{o=T(a)}catch{console.warn("no coordinates:"),console.warn(a);continue}o.properties||(o.properties={}),a.properties[this.config.boundariesLabel]&&(o.properties.label=a.properties[this.config.boundariesLabel]),o.properties.id=a.properties[e],o.properties.id===void 0&&(o.properties.id=a[e]),this.centroids.push(o),o.geometry&&(t+=o.geometry.coordinates[0],s+=o.geometry.coordinates[1],i++)}t/=i,s/=i,console.log("CENTER",t,s),this.needsInitialMapExtent&&!this.vizDetails.center&&(this.$store.commit("setMapCamera",{center:[t,s],bearing:0,pitch:0,zoom:9,initial:!0}),this.needsInitialMapExtent=!1)},async loadShapefileFeatures(e){this.statusText="Loading shapefile...",console.log("loading",e);const t=`${this.subfolder}/${e}`;let s,i,a,o={};try{s=await this.fileApi.getFileBlob(t)}catch{return this.$emit("error","Error loading "+t),[]}try{let c=t;c.endsWith(".shp")&&(c=c.slice(0,-4)+".dbf"),c.endsWith(".SHP")&&(c=c.slice(0,-4)+".DBF"),c.endsWith(".Shp")&&(c=c.slice(0,-4)+".Dbf"),i=await this.fileApi.getFileBlob(c),a=await(await i)?.arrayBuffer()}catch{}try{const c=await(await s)?.arrayBuffer();if(!c)return[];this.statusText="Generating shapes...",o=await q(c,a),o.features=o.features.filter(g=>!!g.geometry),this.statusText=""}catch(c){return console.error(c),this.$emit("error",`Error loading shapefile ${t}`),[]}let r=H,n=t;n.endsWith(".shp")&&(n=n.slice(0,-4)+".prj"),n.endsWith(".SHP")&&(n=n.slice(0,-4)+".PRJ"),n.endsWith(".Shp")&&(n=n.slice(0,-4)+".Prj");try{r=await this.fileApi.getFileText(n)}catch(c){console.error(""+c)}const l=this.vizDetails.projection||k.guessProjection(r);l&&(this.statusText="Projecting coordinates...",await this.$nextTick(),o=G.toWgs84(o,l,k.allEPSGs),this.statusText="");function h(c){return Array.isArray(c[0])?h(c[0]):[c[0],c[1]]}const d=h(o.features[0].geometry.coordinates);return Math.abs(d[0])>180||Math.abs(d[1])>90?(this.$emit("error","Coordinates not lon/lat. Try adding projection to YAML, or provide a .prj file"),this.statusText="",[]):o.features},async loadDatasets(){const e=Object.keys(this.vizDetails.datasets);e.length>1&&(this.featureJoinColumn=await this.figureOutFeatureIdColumn());for(const t of e)t in this.datasets||await this.loadDataset(t)},async loadDataset(e){try{if(!e)return;const t=typeof this.config.datasets[e]=="string"?this.config.datasets[e]:this.config.datasets[e].file;this.statusText=`Loading dataset ${t} ...`,await this.$nextTick();let s={dataset:t};typeof this.config.datasets[e]!="string"&&(s=Object.assign(s,this.config.datasets[e])),this.datasetKeyToFilename[e]=t;const i=await this.myDataManager.getDataset(s,{subfolder:this.subfolder}),a=Object.keys(i.allRows)[0],r=(typeof this.config.datasets[e]=="string"?a:this.config.datasets[e].join||a)?.split(":")||[];r.length==2&&(this.featureJoinColumn=r[0]),r.length==1&&r.push(r[0]),this.datasets[e]=i.allRows,await this.$nextTick(),this.myDataManager.addFilterListener({dataset:t,subfolder:this.subfolder},this.processFiltersNow),this.activateFiltersForDataset(e)}catch(t){const s=""+t;console.error(s),this.$emit("error",s)}return[]},async activateFiltersForDataset(e){const t=this.filterDefinitions.filter(s=>s.dataset===e);for(const s of t)if(s.value=="@categorical")this.filters[s.column]?s.value=this.filters[s.column].active:this.handleUserCreatedNewFilter(`${e}:${s.column}`);else try{await this.myDataManager.setFilter(Object.assign(s,{dataset:this.datasetKeyToFilename[e]}))}catch(i){this.$emit("error",`Filter ${e}.${s.column}: `+i)}},filterLabel(e){let t=this.filters[e].active.join(",").substring(0,50)||"Select...";return t.length===50&&(t+="..."),t},async handleUserSelectedNewMetric(){await this.$nextTick(),console.log("METRIC",this.datasetValuesColumn);const e=Object.assign({},this.$route.query);e.display=this.datasetValuesColumn,this.$router.replace({query:e}),this.maxValue=this.boundaryDataTable[this.datasetValuesColumn].max||0,this.vizDetails.display.fill.columnName=this.datasetValuesColumn,this.vizDetails=Object.assign({},this.vizDetails),this.processFiltersNow()},handleUserSelectedNewFilters(e){const t=this.filters[e],s=t.active;this.myDataManager.setFilter({dataset:this.datasetKeyToFilename[t.dataset],column:e,invert:!1,value:s});const i=Object.assign({},this.$route.query);for(const a of Object.entries(this.filters))a[1].active.length?i[a[0]]=a[1].active.join(","):delete i[a[0]];JSON.stringify(this.$route.query)!==JSON.stringify(i)&&this.$router.replace({query:i})},showCircles(e){this.useCircles=e;const t=Object.assign({},this.$route.query);e?t.show="dots":delete t.show,this.$router.replace({query:t})},handleUserCreatedNewFilter(e){const t=e||this.chosenNewFilterColumn,[s,i]=t.split(":");let a=[...new Set(this.datasets[s][i].values)];if(this.chosenNewFilterColumn="",a.length>48){alert(`Column ${i} has too many values to be used as a filter.`);return}this.filters[i]={column:i,label:i,options:a,active:[],dataset:s}},clearData(){this.boundaries=[],this.centroids=[],this.boundaryDataTable={},this.boundaryFilters=new Float32Array(0),this.datasets={},this.dataFillColors="#888",this.dataLineColors="",this.dataLineWidths=1,this.dataPointRadii=5,this.dataFillHeights=0,this.dataCalculatedValues=null,this.dataCalculatedValueLabel="",this.bgLayers={},this.cbDatasetJoined=null,this.dataNormalizedValues=null,this.resizer=null,this.myDataManager.clearCache()},updateBgLayers(){this.bgLayers={...this.bgLayers}}},async mounted(){try{if(this.dbClearTooltip=Z(this.clearTooltip,1e3),this.setEmbeddedMode(),this.clearData(),await this.getVizDetails(),this.vizDetails.center&&typeof this.vizDetails.center=="string"&&(this.vizDetails.center=this.vizDetails.center.split(",").map(e=>parseFloat(e)),this.config.center=this.config.center.split(",").map(e=>parseFloat(e))),this.config.center&&(Math.abs(this.config.center[0])>180||Math.abs(this.config.center[1])>90)){this.$emit("error",`Invalid map center, doesn't look like longitude/latitude: ${this.config.center}`);const e=this.globalState.viewState;this.vizDetails.center=[e.longitude,e.latitude],this.config.center=[e.longitude,e.latitude],this.vizDetails.zoom=e.zoom,this.config.zoom=e.zoom}if(this.buildOldJoinLookups(),this.filterDefinitions=this.parseFilterDefinitions(this.vizDetails.filters),this.needsInitialMapExtent&&this.vizDetails.center){this.needsInitialMapExtent=!1;const e={center:this.vizDetails.center,zoom:this.vizDetails.zoom||9,bearing:this.vizDetails.bearing||0,pitch:this.vizDetails.pitch||0,initial:!0};this.vizDetails.mapIsIndependent?this.initialView=e:this.$store.commit("setMapCamera",e)}this.expColors=this.config.display?.fill?.exponentColors,this.dataFillColors=D.state.isDarkMode?"#44445580":"#dddddd80",this.config.display.fill||(this.config.display.fill={}),this.config.display?.fill?.values&&(this.config.display.fill.values=this.convertCommasToArray(this.config.display.fill.values)),await this.loadBoundaries(),this.filterShapesNow(),this.needsInitialMapExtent&&!this.vizDetails.center&&(await this.calculateAndMoveToCenter(),this.needsInitialMapExtent=!1),this.isLoaded=!0,this.$emit("isLoaded"),await this.$nextTick(),await this.loadDatasets(),this.datasets=Object.assign({},this.datasets),this.vizDetails=Object.assign({},this.vizDetails),this.honorQueryParameters(),this.backgroundLayers=new M({vizDetails:this.vizDetails,fileApi:this.fileApi,subfolder:this.subfolder}),await this.backgroundLayers.initialLoad()}catch(e){this.$emit("error",""+e),this.$emit("isLoaded")}this.statusText=""},beforeDestroy(){this.clearData(),this.legendStore.clear(),this.resizer?.disconnect(),this.myDataManager.removeFilterListener(this.config,this.processFiltersNow),this.$store.commit("setFullScreen",!1)}});var Lt=function(){var t=this,s=t._self._c;return t._self._setupProxy,s("div",{staticClass:"shapefile-viewer",attrs:{oncontextmenu:"return false"}},[t.showJoiner?s("modal-id-column-picker",t._b({attrs:{header:"Which column contains the unique ID for each shape/feature?"},on:{join:t.cbDatasetJoined}},"modal-id-column-picker",t.datasetJoinSelector,!1)):t._e(),t.statusText?s("div",{staticClass:"status-box"},[s("p",[t._v(t._s(t.statusText))]),t.loadProgress>0?s("b-progress",{staticClass:"load-progress",attrs:{value:t.loadProgress,rounded:!1,type:"is-success"}}):t._e()],1):t._e(),s("div",{staticClass:"main-layout",on:{mousemove:t.dividerDragging}},[s("div",{directives:[{name:"show",rawName:"v-show",value:t.showLegend,expression:"showLegend"}],staticClass:"dragger",on:{mousedown:t.dividerDragStart,mouseup:t.dividerDragEnd,mousemove:function(i){return i.stopPropagation(),t.dividerDragging.apply(null,arguments)}}}),s("div",{directives:[{name:"show",rawName:"v-show",value:t.showLegend,expression:"showLegend"}],staticClass:"new-rightside-info-panel",style:{width:`${t.legendSectionWidth}px`}},[s("div",{staticClass:"legend-panel scrolly"},[t.legendStore.state?.sections?.length?t._e():s("p",{staticStyle:{"font-size":"1.1rem"}},[s("b",[t._v("INFO PANEL")])]),s("legend-box",{attrs:{legendStore:t.legendStore}}),Object.keys(t.bgLayers).length?s("div",{staticClass:"bglayer-section flex-col"},[s("h5",[t._v("Layers")]),t._l(Object.keys(t.bgLayers),function(i){return s("b-checkbox",{key:i,staticClass:"simple-checkbox",on:{input:t.updateBgLayers},model:{value:t.bgLayers[i].visible,callback:function(a){t.$set(t.bgLayers[i],"visible",a)},expression:"bgLayers[layer].visible"}},[t._v(t._s(i))])})],2):t._e()],1),t.tooltipHtml&&!t.statusText?s("div",{staticClass:"tooltip-html flex-col",on:{mouseover:function(i){t.wantToClearTooltip=!1},mouseout:function(i){t.wantToClearTooltip=!0}}},[s("div",{staticClass:"the-html",domProps:{innerHTML:t._s(t.tooltipHtml)}}),t.tooltipDesiredColumns.length?s("div",{staticClass:"edit-hint",staticStyle:{"text-align":"right"}},[s("a",{on:{click:function(i){t.showTooltipConfigurator=!0}}},[t._v("Show/hide...")])]):t._e()]):t._e()]),s("div",{staticClass:"area-map",attrs:{id:`container-${t.layerId}`}},[!t.showLegend&&!t.statusText&&t.tooltipHtml?s("div",{staticClass:"tooltip-when-no-legend-present flex-col",on:{mouseover:function(i){t.wantToClearTooltip=!1},mouseout:function(i){t.wantToClearTooltip=!0}}},[s("div",{staticClass:"the-html",domProps:{innerHTML:t._s(t.tooltipHtml)}}),t.tooltipDesiredColumns.length?s("a",{staticStyle:{textAlign:"right"},on:{click:function(i){t.showTooltipConfigurator=!0}}},[t._v("Show/hide...")]):t._e()]):t._e(),t.needsInitialMapExtent?t._e():s("geojson-layer",{staticClass:"map-layers",attrs:{bgLayers:t.backgroundLayers,cbTooltip:t.cbTooltip,cbClickEvent:t.handleClickEvent,dark:t.globalState.isDarkMode,features:t.boundaries,featureFilter:t.boundaryFilters,fillColors:t.dataFillColors,fillHeights:t.dataFillHeights,highlightedLinkIndex:t.highlightedLinkIndex,initialView:t.initialView,isRGBA:t.isRGBA,isAtlantis:t.isAtlantis,lineColors:t.dataLineColors,lineWidths:t.dataLineWidths,mapIsIndependent:!!t.vizDetails.mapIsIndependent,opacity:t.sliderOpacity/100*(t.sliderOpacity/100),pointRadii:t.dataPointRadii,redraw:t.redraw,screenshot:t.triggerScreenshot,viewId:t.layerId}}),t.showTooltipConfigurator?s("div",{staticClass:"modal modal-tooltip-picker flex-col",on:{mouseover:function(i){t.wantToClearTooltip=!1}}},[s("h4",[t._v("Configure tooltips")]),s("p",{staticStyle:{margin:"0.5rem auto 0 0.75rem"}},[t._v("Select feature columns to be displayed in default tooltips.")]),s("div",{staticClass:"flex-row",staticStyle:{margin:"0.25rem auto 0 0.75rem",gap:"0.25rem"}},[s("b-button",{staticClass:"is-small",attrs:{type:"is-link",outlined:""},on:{click:t.setDesiredTooltipsNone}},[t._v("None")]),s("b-button",{staticClass:"is-small",attrs:{type:"is-link",outlined:""},on:{click:t.setDesiredTooltipsAll}},[t._v(" All ")])],1),s("div",{staticClass:"tooltip-items flex-col flex1"},t._l(t.tooltipDesiredColumns,function(i,a){return s("b-checkbox",{key:i.col,staticClass:"cbspace",model:{value:i.enabled,callback:function(o){t.$set(i,"enabled",o)},expression:"item.enabled"}},[t._v(" "+t._s(i.col))])}),1),s("div",{staticClass:"close-row flex-row",staticStyle:{padding:"0.5rem","margin-left":"auto",gap:"0.25rem"}},[s("b-button",{staticClass:"is-small",attrs:{type:"is-success"},on:{click:function(i){t.showTooltipConfigurator=!1}}},[t._v(" Close ")])],1)]):t._e(),t.isLoaded?s("viz-configurator",{attrs:{embedded:t.isEmbedded,sections:t.configuratorSections,fileSystem:t.fileSystem,subfolder:t.subfolder,yamlConfig:t.generatedExportFilename,vizDetails:t.vizDetails,datasets:t.datasets,legendStore:t.legendStore,filterDefinitions:t.currentUIFilterDefinitions},on:{update:t.changeConfiguration,screenshot:t.takeScreenshot,toggleLegend:function(i){t.showLegend=!t.showLegend}}}):t._e(),t.isAreaMode?s("div",{staticClass:"width-sliders flex-row",style:{backgroundColor:t.globalState.isDarkMode?"#00000099":"#ffffffaa"}},[s("img",{staticClass:"icon-blue-ramp",attrs:{src:t.icons.blueramp}}),s("b-slider",{staticClass:"pie-slider",attrs:{type:"is-success",tooltip:!0,size:"is-small",min:0,max:100},model:{value:t.sliderOpacity,callback:function(i){t.sliderOpacity=i},expression:"sliderOpacity"}})],1):t._e(),t.isLoaded&&!t.vizDetails.mapIsIndependent?s("zoom-buttons"):t._e(),!t.isEmbedded&&t.isLoaded&&Object.keys(t.filters).length?s("div",{staticClass:"config-bar",class:{"is-standalone":!t.configFromDashboard,"is-disabled":!t.isLoaded}}):t._e(),t._l(Object.keys(t.filters),function(i){return s("div",{staticClass:"filter"},[s("p",[t._v(t._s(i))]),s("b-dropdown",{attrs:{scrollable:t.filters[i].active.length>10,"max-height":"250",multiple:"","aria-role":"list","mobile-modal":!1,"close-on-click":!0},on:{change:function(a){return t.handleUserSelectedNewFilters(i)}},scopedSlots:t._u([{key:"trigger",fn:function({active:a}){return[s("b-button",{staticClass:"is-primary",attrs:{type:t.filters[i].active.length?"":"is-outlined",label:t.filterLabel(i)}})]}}],null,!0),model:{value:t.filters[i].active,callback:function(a){t.$set(t.filters[i],"active",a)},expression:"filters[filter].active"}},t._l(t.filters[i].options,function(a){return s("b-dropdown-item",{key:a,attrs:{value:a,"aria-role":"listitem"}},[t._v(t._s(a))])}),1)],1)})],2)])],1)},kt=[],Ft=J(Dt,Lt,kt,!1,null,"2be5fae1");const le=Ft.exports;export{le as default};
